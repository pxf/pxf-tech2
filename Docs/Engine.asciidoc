pxf-tech2 engine
================

Document notes:
--------------
This document does not cover 100% of the API as the engine still is in heavy development. However, it will
provide a brief overview of the engine design and some code snippets that explains basic usage. For details,
check the header files. Most of them should be easy to understand.

This document should be more of a general usage guide than a specification of the API, we are not quite there yet though.

Build system
------------
The engine uses the build system http://matricks.github.com/bam/[bam]. We have a customized
build file that resolves module and library dependencies in a simple way for each project.

.Example build-file for a simple project
[source, lua]
----
Import("../../PxfBuild.lua")
project = NewProject("example-project")

-- Build and link with lua, make headers available etc.
project:RequireLibrary("lua")

-- Add the module "net", which implements <Pxf/Network/*>. Our implementation uses enet.
project:RequireModule("net")

-- Add appropriate include and source directories
project:AddIncludeDirectory("Include/")
project:AddSourceDirectory("Source/*.cpp")

-- Build
project:Build()
----

Modules and libraries are specified in a similar way, have a look in *Libraries/rtaudio*
and *Modules/snd* to see how the audio system is built.

Building
~~~~~~~~
Installing bam is simple, however; on Windows the build-tools aren't in *$PATH* by default. The easiest
way to get it to work is to copy Tools/bam* to %windir%. 

Now, assuming that bam and your compiler is in *$PATH*, compiling should be as easy as the following:
----
bam -j 4 -s Build.lua target_type
----
The above command executes compilation using 4 threads; change this number depending on the system you are using.

Currently the following target type are defined:
--
* debug - static debug build, modules will be compiled and embedded in a single binary
* debug_dll - dynamic debug build, modules will be compiled as easy-replacable dynamic libraries
* release - static release build
* release_dll - dynamic release build
--

Future additions
~~~~~~~~~~~~~~~~
--
* Should be able to compile individual modules in a simple way
** debug_**module**, release_**module**
--

Engine
------
This is a general overview of the pxf tech2 engine, its components and how they interact with each other.

Kernel
~~~~~~

General
^^^^^^^
The kernel is the main component in *pxf-tech2*. The kernel is a singleton, and you can get
the instance by calling

[source, cpp]
----
Kernel* Kernel::GetInstance();
----

Modules
^^^^^^^
With the kernel, we can register external modules (.dll, .so, .dynlib depending on your platform)
.Example of registering a module
[source, cpp]
----
kernel->RegisterModule("snd", Pxf::System::SYSTEM_TYPE_AUDIODEVICE | Pxf::System::SYSTEM_TYPE_RESOURCELOADER);
----
We have a module *snd* that is responsible for audio output, and what the above snippet does is the following:
--
* Check what platform we are compiled for, and if we are in release or debug mode
    - Load snd_**BuildTypeSuffix**.**PlatformExt** (e.g snd_ddyn.dll for dynamically linked build in debug mode on windows)
* Load module and create an instance of it
* Check if the module is already loaded (this is the case if a module is already built-in to the binary)^1^
    - fail, replace or do nothing etc etc.
* Call Module::RegisterSystems for the loaded module, in the case above we have a filter that
  specifies to load audio devices and resource loaders (e.g. support for .ogg-files).
* All done, the audio device is now registered with the kernel, and the instance is available
through *Kernel::GetAudioDevice()*
--

*1.* An optional third flag (default=false) can be specified in Kernel::RegisterModule, if set to true
the already loaded module will be replaced.

Systems
^^^^^^^
Currently we have interfaces and working modules for the following systems
--
* Audio (snd)
* Graphics (pri)
* Network (net)
* Input (pri)
* Resource Loader (snd::ogg, json, img, mesh)
--

Future plans on additional systems
--
* Scripting
* Physics
--


Resource Loaders
++++++++++++++++
The resource loaders implements interfaces found in *Pxf/Resource/$Type.h*, and has the following methods for
loading a resource.
--
* Load(file_path);
* CreateFrom(memory_ptr, length);
--
A loader can also have custom methods, for example the JSON loader has
--
* CreateEmpty();
--
and the image loader has
--
* CreateFromRaw(width, height, num_color_channels, memory_ptr);
--

Resource Management
~~~~~~~~~~~~~~~~~~~
The kernel manages a resource manager available with
[source, cpp]
----
Resource::ResourceManager* Kernel::GetResourceManager();
----

The resource manager keeps a table of loaded resources, and does some simple reference counting to remove resources from memory when they aren't being used.
From a usage perspective this works rather simple. As an example, I will load an audio sample:
[source, cpp]
----
Resource::ResourceManager* res = kernel->GetResourceManager();

// Load file and create resource
Resource::Sound* snd = res->Acquire<Resource::Sound>("data/my_sample.ogg");

// Register sample and play it
Audio::AudioDevice audio = res->GetAudioDevice();
int audio_id = audio->RegisterSound(snd);
if (audio_id >= 0)
    audio->Play(audio_id);

// ...

// Release sample (this should also invalidate the audio_id)
res->Release(snd);
----

It's a bit trickier to create a resource manually, but this is how it's currently done.
[source, cpp]
----
const char ogg_data[] = "...";
Resource::SoundLoader* snd_ldr = res->FindResourceLoader<Resource::SoundLoader>("ogg");
Resource::Sound* snd = snd_ldr->CreateFrom(ogg_data, sizeof(ogg_data)/sizeof(ogg_data[0]));
...
----
Simpler methods might be added at a later time.

To see what modules are loaded, we can dump them to screen using
[source, cpp]
----
res->DumpResourceLoaders();
----

Audio
-----
Initialize the audio-device. _BufferSize is the number of frames to process at a time. There is less audio latency with
lower buffer size, as long as the sound card can keep up. _MaxVoices is the maximum number of simultaniously playing sounds.
[source, cpp]
----
bool AudioDevice::Initialize(unsigned int _BufferSize, unsigned int _MaxVoices);
----

Register a sound with the engine, return identifier used for controlling the sound.
[source, cpp]
----
int AudioDevice::RegisterSound(const char* _Filename);
int AudioDevice::RegisterSound(Resource::Sound* _Sound);
----

Look-up sound id based on sound instance
[source, cpp]
----
int AudioDevice::GetSoundID(const Resource::Sound* _Sound);
----

Unregister sound
[source, cpp]
----
void AudioDevice::UnregisterSound(int _Id);
void AudioDevice::UnregisterSound(const Resource::Sound* _Sound);
----

Playback controls

.Play
[source, cpp]
----
void AudioDevice::Play(int _SoundID, bool _Loop = false);
----
Behaviour for different states of _SoundID
--
* Play
** Starts playing sample with _SoundID if it's not an active voice
** Resumes _SoundID if it's a paused voice
** Restart _SoundID if it's an active playing voice
--

.Other
Stop or pause individual or all voices.
[source, cpp]
----
void AudioDevice::Stop(int _SoundID);
void AudioDevice::StopAll();
void AudioDevice::Pause(int _SoundID);
void AudioDevice::PauseAll();
----

Dump audio device information to the logger
[source, cpp]
----
void AudioDevice::DumpInfo();
----

Graphics
--------
For now, see **Pxf/Graphics/*.h**. Still very much a work-in-progress. See **Projects/DERPRenderer** for advanced usage.

.GraphicsDevice
[source, cpp]
----
Graphics::Window* GraphicsDevice::OpenWindow(WindowSpecifications* _pWindowSpecs);
void GraphicsDevice::CloseWindow();

void GraphicsDevice::SetViewport(int _x, int _y, int _w, int _h);
void GraphicsDevice::SetProjection(Math::Mat4 *_matrix);
void GraphicsDevice::SetModelView(Math::Mat4 *_matrix);
void GraphicsDevice::Translate(Math::Vec3f _translate);
void GraphicsDevice::SwapBuffers();

// Texture
Graphics::Texture* GraphicsDevice::CreateEmptyTexture(int _Width, int _Height
                                                     , TextureFormatStorage _Format = TEX_FORMAT_RGBA);
Graphics::Texture* GraphicsDevice::CreateTexture(const char* _filepath);
Graphics::Texture* GraphicsDevice::CreateTexture(Resource::Image* _Image);
Graphics::Texture* GraphicsDevice::CreateTextureFromData(const unsigned char* _datachunk, int _width
                                                        , int _height, int _channels);
Graphics::Texture* GraphicsDevice::BindTexture(Texture* _texture);
Graphics::Texture* GraphicsDevice::BindTexture(Texture* _texture
                                              , unsigned int _texture_unit);
void GraphicsDevice::DestroyTexture(Texture* _texture);

Graphics::Texture* GraphicsDevice::CreateTextureFromFramebuffer();
Resource::Image* GraphicsDevice::CreateImageFromTexture(Texture* _texture);

Graphics::VertexBuffer* GraphicsDevice::CreateVertexBuffer(VertexBufferLocation _VertexBufferLocation
                                                          , VertexBufferUsageFlag _VertexBufferUsageFlag);
void GraphicsDevice::DestroyVertexBuffer(VertexBuffer* _pVertexBuffer);
void GraphicsDevice::DrawBuffer(VertexBuffer* _pVertexBuffer, unsigned _VertexCount);

// Model
Graphics::Model* GraphicsDevice::CreateModel(const char* _FilePath);
Graphics::Model* GraphicsDevice::CreateModel(Resource::Mesh* _Mesh);

// Buffers
Graphics::RenderBuffer* GraphicsDevice::CreateRenderBuffer(unsigned _Format, unsigned _Width, unsigned _Height);
void GraphicsDevice::DestroyRenderBuffer(RenderBuffer* _pRenderBuffer);
void GraphicsDevice::BindRenderBuffer(RenderBuffer* _pRenderBuffer);
void GraphicsDevice::UnbindRenderBuffer();

Graphics::FrameBufferObject* GraphicsDevice::CreateFrameBufferObject();
void GraphicsDevice::DestroyFrameBufferObject(FrameBufferObject* _pFrameBufferObject);
Graphics::FrameBufferObject* GraphicsDevice::BindFrameBufferObject(FrameBufferObject* _pFrameBufferObject);
void GraphicsDevice::UnbindFrameBufferObject();

Graphics::Shader* GraphicsDevice::CreateShader(const char* _Ident, const char* _VertexShader, const char* _FragmentShader);
void GraphicsDevice::DestroyShader(Shader* _Shader);
Graphics::Shader* GraphicsDevice::BindShader(Shader* _Shader);
void GraphicsDevice::SetUniformi(Shader* _Shader, const char* _name, int _value);
void GraphicsDevice::SetUniformf(Shader* _Shader, const char* _name, float _value);
void GraphicsDevice::SetUniformVec2(Shader* _Shader, const char* _name, const Math::Vec2f* _value);
void GraphicsDevice::SetUniformVec3(Shader* _Shader, const char* _name, const Math::Vec3f* _value);
void GraphicsDevice::SetUniformVec3v(Shader* _Shader, const char* _name, unsigned count, const Math::Vec3f* _value);
void GraphicsDevice::SetUniformVec4(Shader* _Shader, const char* _name, const Math::Vec4f* _value);
void GraphicsDevice::SetUniformVec4v(Shader* _Shader, const char* _name, unsigned count, const Math::Vec4f* _value);
void GraphicsDevice::SetUniformMat4(Shader* _Shader, const char* _name, const Math::Mat4* _value);
----

.WindowSpecifications
[source, cpp]
----
struct WindowSpecifications
{
    int Width;
    int Height;
    int ColorBits;
    int AlphaBits;
    int DepthBits;
    int StencilBits;
    int FSAASamples;
    bool Fullscreen;
    bool Resizeable;
    bool VerticalSync;
};
----

.Window
[source, cpp]
----
typedef void(*WindowSizeCallback)(int _Width, int _Height);

bool Window::Open();
bool Window::Close();
void Window::Swap();

void Window::SetResizeCallback(WindowSizeCallback fun);
void Window::SetTitle(const char *_title);

int Window::GetFPS();
int Window::GetWidth();
int Window::GetHeight();
float Window::GetAspectRatio();

bool Window::IsOpen();
----

.Vertex Buffer
[source, cpp]
----
/**
 * VertexBuffer location types
 * VB_LOCATION_SYS is stored in system memory
 * VB_LOCATION_GPU is stored in GPU memory
 */
enum VertexBufferLocation
{
    VB_LOCATION_SYS,
    VB_LOCATION_GPU
};

/**
 * VertexBuffer attributes
 */
enum VertexBufferAttribute
{
    VB_VERTEX_DATA = 1,
    VB_NORMAL_DATA = 2,
    VB_TEXCOORD_DATA = 4,
    VB_COLOR_DATA = 8,
    VB_INDEX_DATA = 16,
    VB_EDGEFLAG_DATA = 32,
};

/**
 * Vertex buffer usage flags (used for GPU located memory)
 */

enum VertexBufferUsageFlag
{
    VB_USAGE_STATIC_DRAW = 1,
    VB_USAGE_STATIC_READ = 2,
    VB_USAGE_STATIC_COPY = 4,
    VB_USAGE_DYNAMIC_DRAW = 8,
    VB_USAGE_DYNAMIC_READ = 16,
    VB_USAGE_DYNAMIC_COPY = 32,
    VB_USAGE_STREAM_DRAW = 64,
    VB_USAGE_STREAM_READ = 128,
    VB_USAGE_STREAM_COPY = 256
};

/**
 * Vertex buffer access flags, specifies what type of access when
 * mapping gpu memory data.
 */
enum VertexBufferAccessFlag
{
    VB_ACCESS_READ_ONLY = 1,
    VB_ACCESS_WRITE_ONLY = 2,
    VB_ACCESS_READ_WRITE = 4
};

enum VertexBufferPrimitiveType { 
    VB_PRIMITIVE_NONE   = 0,
    VB_PRIMITIVE_POINTS = 1, 
    VB_PRIMITIVE_LINES,
    VB_PRIMITIVE_LINE_LOOP,
    VB_PRIMITIVE_LINE_STRIP,
    VB_PRIMITIVE_TRIANGLES,
    VB_PRIMITIVE_TRIANGLE_STRIP,
    VB_PRIMITIVE_TRIANGLE_FAN,
    VB_PRIMITIVE_QUADS,
    VB_PRIMITIVE_QUAD_STRIP
};
----

[source, cpp]
----
void   VertexBuffer::CreateNewBuffer(uint32 _NumVertices, uint32 _VertexSize);
void   VertexBuffer::CreateFromBuffer(void* _Buffer,uint32 _NumVertices, uint32 _VertexSize); 
void   VertexBuffer::UpdateData(void* _Buffer, uint32 _Count, uint32 _Offset);
void*  VertexBuffer::MapData(VertexBufferAccessFlag _AccessFlag);
void   VertexBuffer::UnmapData();
void   VertexBuffer::SetData(VertexBufferAttribute _AttribType, uint8 _StrideOffset, uint8 _NumComponents);
uint8  VertexBuffer::GetStrideOffset(VertexBufferAttribute _AttribType);
uint8  VertexBuffer::GetTypeSize(VertexBufferAttribute _AttribType);
uint32 VertexBuffer::GetVertexCount() const;
uint32 VertexBuffer::GetByteCount() const;
void   VertexBuffer::SetPrimitive(VertexBufferPrimitiveType _PrimitiveType);
VertexBufferPrimitiveType VertexBuffer::GetPrimitive();
----

.Framebuffer
[source, cpp]
----
void FramebufferObject::Attach(Texture* _Texture, const unsigned _Attachment, bool _GenMipmaps) = 0;
void FramebufferObject::Attach(RenderBuffer* _Buffer, const unsigned _Attachment) = 0;
void FramebufferObject::Detach(const unsigned _Attachment) = 0;
void FramebufferObject::DetachAll() = 0;
int  FramebufferObject::GetNumColorAttachment() { return m_NumColorAttachment; }
bool FramebufferObject::GetUseDepthAttachment() { return m_UseDepthAttachment; }
bool FramebufferObject::GetUseStencilAttachment() { return m_UseStencilAttachment; }
bool FramebufferObject::IsComplete() { return m_Complete; }
----

.Renderbuffer
[source, cpp]
----
int  RenderBuffer::GetWidth();
int  RenderBuffer::GetHeight();
bool RenderBuffer::Ready();
----

.Texture
[source, cpp]
----
enum TextureFilter
{
    // valid for min & mag
    TEX_FILTER_NEAREST = 0,
    TEX_FILTER_LINEAR,

    // valid only for min, obviously.
    TEX_FILTER_LINEAR_MIPMAP_LINEAR,
    TEX_FILTER_LINEAR_MIPMAP_NEAREST,
    TEX_FILTER_NEAREST_MIPMAP_LINEAR,
    TEX_FILTER_NEAREST_MIPMAP_NEAREST
};

enum TextureClampMethod
{
    TEX_CLAMP,
    TEX_CLAMP_TO_EDGE,
    TEX_REPEAT
};

enum TextureFormatStorage
{
    TEX_FORMAT_RGB,
    TEX_FORMAT_RGBA,
    TEX_FORMAT_R,
    TEX_FORMAT_G,
    TEX_FORMAT_B,
    TEX_FORMAT_A
};
----

[source, cpp]
----
void Texture::Load(const char* _filepath) = 0;
void Texture::LoadData(const unsigned char* _datachunk, int _width, int _height, int _channels);
void Texture::Unload();
void Texture::Reload();
int Texture::GetWidth();
int Texture::GetHeight();
int Texture::GetChannels();
void Texture::SetMagFilter(TextureFilter _Filter);
void Texture::SetMinFilter(TextureFilter _Filter);
void Texture::SetClampMethod(TextureClampMethod _Method);
unsigned int Texture::GetTextureID();
Math::Vec4f Texture::CreateTextureSubset(float _x1, float _y1, float _x2, float _y2);
----

.Shader
[source, cpp]
----
bool Shader::IsValid();
----

Input
-----
The input system is rather simple. The first thing that must be done before you can get any input is to call
[source, cpp]
----
void InputDevice::Update();
----
This should be done at least once per frame.

Keyboard input
~~~~~~~~~~~~~~
Returns true if the key is down
[source, cpp]
----
bool InputDevice::IsKeyDown(int _key);
----

When a key is pressed, it's stored internally within the input device
The key and char value can be fetched with the following methods
[source, cpp]
----
int InputDevice::GetLastKey();
int InputDevice::GetLastChar();
----

You have to manually reset these after each frame, or when you are done with them
[source, cpp]
----
void InputDevice::ClearLastKey();
void InputDevice::ClearLastChar();
----

Mouse input
~~~~~~~~~~~
Same as above, but for mouse buttons.
[source, cpp]
----
bool InputDevice::IsButtonDown(int _button);
int InputDevice::GetLastButton();
void InputDevice::ClearLastButton();
----

Set/get active mouse mode
[source, cpp]
----
Input::MouseMode InputDevice::GetMouseMode();
void InputDevice::SetMouseMode(MouseMode _Mode);
----

Get mouse position (either absolute or relative to the previous frame; depending on mouse mode)
[source, cpp]
----
void InputDevice::GetMousePos(int *x, int *y);
void InputDevice::SetMousePos(int x, int y);
----

Set visibility of the system cursor
[source, cpp]
----
void InputDevice::ShowCursor(bool _show);
----

.Special keys
----
    UNKNOWN
    SPACE
    SPECIAL
    ESC
    F1
    F2
    F3
    F4
    F5
    F6
    F7
    F8
    F9
    F10
    F11
    F12
    F13
    F14
    F15
    F16
    F17
    F18
    F19
    F20
    F21
    F22
    F23
    F24
    F25
    UP
    DOWN
    LEFT
    RIGHT
    LSHIFT
    RSHIFT
    LCTRL
    RCTRL
    LALT
    RALT
    TAB
    ENTER
    BACKSPACE
    INSERT
    DEL
    PAGEUP
    PAGEDOWN
    HOME
    END
    KP_0
    KP_1
    KP_2
    KP_3
    KP_4
    KP_5
    KP_6
    KP_7
    KP_8
    KP_9
    KP_DIVIDE
    KP_MULTIPLY
    KP_SUBTRACT
    KP_ADD
    KP_DECIMAL
    KP_EQUAL
    KP_ENTER
    LAST
----

.Mouse modes
----
    MODE_RELATIVE
    MODE_ABSOLUTE
----

.Mouse buttons
----
    MOUSE_1
    MOUSE_2
    MOUSE_3
    MOUSE_4
    MOUSE_5
    MOUSE_6
    MOUSE_7
    MOUSE_8

    MOUSE_NONE
    MOUSE_LAST
    MOUSE_LEFT
    MOUSE_RIGHT
    MOUSE_MIDDLE
----

Network
-------

.Network::NetworkDevice
[source, cpp]
----
Server* CreateServer();
Client* CreateClient();

Server* GetServer(const int _ServerIdent);
Client* GetClient(const int _ClientIdent);

void KillServer(const int _ServerIdent);
void KillClient(const int _ClientIdent);

int AddTag(char* _Name);
Util::Array<char*>* GetTags();
----

.Network::Client
[source, cpp]
----
bool Connect(const char* _Host, const int _Port);
bool Disconnect();
bool Connected();

Packet* Recv();
Packet* RecvNonBlocking(const int _Timeout);
bool Send(const int _Type, const char* _Buf);
----

.Network::Server
[source, cpp]
----
bool Bind(const int _Port);
bool Shutdown();

Packet* Recv();
Packet* RecvNonBlocking(const int _Timeout);
bool Send(const int _Client, const int _Type, const char* _Buf);
bool SendAll(const int _Type, const char* _Buf);
bool SendAllL(const int _Type, const char* _Buf, const int _Length);
bool SendAllID(const char* _ID, const int _Type, const char* _Buf, const int _Length);
----

.Network::Packet
[source, cpp]
----
char* GetData();
int GetSender();
int GetLength();
int GetTag();
char* GetID();
----


Math
----
See Pxf/Math/(Math|Vector|Matrix).h. This will probably be replaced with the Sony Vector Math Library later.
