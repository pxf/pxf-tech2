//////////////////
// tree info
[
  {"blockName" : "PipelineTree",
   "blockType" : "PipelineTree",
   "blockData" : { "root" : "output1" }
  },


  //////////////////
  // block info
  {"blockName" : "auxinput1",
   "blockType" : "AuxComp",
   "blockData" : {"auxType" : "texture",
                  "filepath" : "10828EF0_derptest.png",
                  "minfilter" : "nearest"
                 },
   "blockOutput" : [{"name" : "texture1",
                     "type" : "texture"}]
  },
  
  {"blockName" : "auxinput2",
   "blockType" : "AuxComp",
   "blockData" : {"auxType" : "script",
                  "src" : "return ((math.sin(os.clock()) + 1.0) / 2)"
                 },
   "blockOutput" : [{"name" : "script1",
                     "type" : "float"}]
  },

  {"blockName" : "auxinput3",
   "blockType" : "AuxComp",
   "blockData" : {"auxType" : "model",
                  "filepath" : "82CAA962_teapot.ctm"
                 },
   "blockOutput" : [{"name" : "geo1",
                     "type" : "geometry"}]
  },

  {"blockName" : "auxinput4",
   "blockType" : "AuxComp",
   "blockData" : {"auxType" : "script",
                  "src" : "lol = 100; return (math.sin(os.clock()) * lol), 0.0, (math.cos(os.clock()) * lol)"
                 },
   "blockOutput" : [{"name" : "script2",
                     "type" : "vec3"}]
  },

  {"blockName" : "auxinput5",
   "blockType" : "AuxComp",
   "blockData" : {"auxType" : "script",
                  "src" : "return 0.0, (math.sin(os.clock()) * 10), 0.0"
                 },
   "blockOutput" : [{"name" : "script3",
                     "type" : "vec3"}]
  },

  {"blockName" : "auxinput6",
   "blockType" : "AuxComp",
   "blockData" : {"auxType" : "script",
                  "src" : "return 20.0, 0.0, 0.0"
                 },
   "blockOutput" : [{"name" : "script4",
                     "type" : "vec3"}]
  },

  {"blockName" : "render1",
   "blockType" : "Render",
   "blockInput" : [{"block" : "auxinput3", "output" : "geo1"},
                   {"block" : "auxinput1", "output" : "texture1"},
                   {"block" : "auxinput6", "output" : "script4"},
                   {"block" : "auxinput4", "output" : "script2"},
						 {"block" : "auxinput5", "output" : "script3"}],
   "blockData" : {"width" : 512,
                  "height" : 512,
						"cameraPosition" : "script2",
						"cameraLookAt" : "script3",
						"cameraFov" : 45.0,
                  "shaderVert" : "uniform sampler2D texture1;
                  varying vec3 n;
                  uniform vec3 script4;
						void main(void)
                  {
                  	gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
							n = gl_Normal;//gl_NormalMatrix * gl_Normal;
                  	gl_TexCoord[0] = gl_MultiTexCoord0;
                  }",
                  "shaderFrag" : "varying vec3 n;
                  uniform sampler2D texture1;
						uniform vec3 script4;
                  void main()
                  {
							float intensity;
							vec3 color;
							intensity = dot(normalize(script4),normalize(n));
							//intensity = max(intensity, 0.0);
							color = vec3(intensity);

                  	//gl_FragColor = vec4(n, 1.0);
							//gl_FragColor = vec4(script4, 1.0);
							gl_FragColor = intensity*texture2D(texture1, gl_TexCoord[0].st);//vec4(color, 1.0);
                  }"
                 },
   "blockOutput" : [ {"name" : "texture3", "type" : "texture"}]
  },
  
  {"blockName" : "postprocess1",
   "blockType" : "Post-Process",
   "blockInput" : [{"block" : "render1", "output" : "texture3"},
                   {"block" : "auxinput2", "output" : "script1"}],
   "blockData" : {"width" : 512,
                  "height" : 512,
                  "shaderVert" : "uniform sampler2D texture3;
                  uniform float script1;
                  void main(void)
                  {
                  	gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
                  	gl_TexCoord[0] = gl_MultiTexCoord0;
                  }",
                  "shaderFrag" : "uniform sampler2D texture3;
                  uniform float script1;
                  void main()
                  {
                  	gl_FragData[0] = vec4(1.0) - texture2D(texture3, gl_TexCoord[0].st);
                  //	gl_FragData[0] = vec4(0.0, 1.0, 0.0, 1.0);
                  //	gl_FragData[1] = vec4(1.0) - texture2D(texture1, script1*gl_TexCoord[0].st);
                  //	gl_FragData[2] = vec4(0.5) - texture2D(texture1, script1*gl_TexCoord[0].st);
                  }"
                 },
   "blockOutput" : [ {"name" : "texture2", "type" : "texture"}]
  },

  {"blockName" : "output1",
   "blockType" : "Root",
   "blockInput" : [{"block" : "render1", "output" : "texture3"},
                   {"block" : "postprocess1", "output" : "texture2"},
                   {"block" : "auxinput2", "output" : "script1"}],
   "blockData" : {"host" : "localhost",
                  "port" : "4632",
                  "feedback" : true,
                  "realtime" : false,
                  "shaderVert" : "uniform sampler2D texture3;
						uniform sampler2D texture2;
                  uniform float script1;
                  void main(void)
                  {
                  	gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
                  	gl_TexCoord[0] = gl_MultiTexCoord0;
                  }",
                  "shaderFrag" : "uniform sampler2D texture3;
                  uniform sampler2D texture2;
                  uniform float script1;
                  void main()
                  {
                    if (gl_TexCoord[0].s > 0.5)
                        gl_FragColor = texture2D(texture3, gl_TexCoord[0].st);
                    else
                        gl_FragColor = texture2D(texture2, gl_TexCoord[0].st);
                  }",
                  "width" : 512,
                  "height" : 512
                 }
  }
]