// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raytracer.proto

#ifndef PROTOBUF_raytracer_2eproto__INCLUDED
#define PROTOBUF_raytracer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace raytracer {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_raytracer_2eproto();
void protobuf_AssignDesc_raytracer_2eproto();
void protobuf_ShutdownFile_raytracer_2eproto();

class DataBlob;
class DataBlob_Vec3f;
class DataBlob_PrimitiveSphere;
class DataBlob_PointLight;
class DataBlob_Camera;
class DataBlob_BVH;
class Task;
class Result;

// ===================================================================

class DataBlob_Vec3f : public ::google::protobuf::Message {
 public:
  DataBlob_Vec3f();
  virtual ~DataBlob_Vec3f();
  
  DataBlob_Vec3f(const DataBlob_Vec3f& from);
  
  inline DataBlob_Vec3f& operator=(const DataBlob_Vec3f& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataBlob_Vec3f& default_instance();
  
  void Swap(DataBlob_Vec3f* other);
  
  // implements Message ----------------------------------------------
  
  DataBlob_Vec3f* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataBlob_Vec3f& from);
  void MergeFrom(const DataBlob_Vec3f& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);
  
  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);
  
  // required float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);
  
  // @@protoc_insertion_point(class_scope:raytracer.DataBlob.Vec3f)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  float x_;
  float y_;
  float z_;
  friend void  protobuf_AddDesc_raytracer_2eproto();
  friend void protobuf_AssignDesc_raytracer_2eproto();
  friend void protobuf_ShutdownFile_raytracer_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DataBlob_Vec3f* default_instance_;
};
// -------------------------------------------------------------------

class DataBlob_PrimitiveSphere : public ::google::protobuf::Message {
 public:
  DataBlob_PrimitiveSphere();
  virtual ~DataBlob_PrimitiveSphere();
  
  DataBlob_PrimitiveSphere(const DataBlob_PrimitiveSphere& from);
  
  inline DataBlob_PrimitiveSphere& operator=(const DataBlob_PrimitiveSphere& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataBlob_PrimitiveSphere& default_instance();
  
  void Swap(DataBlob_PrimitiveSphere* other);
  
  // implements Message ----------------------------------------------
  
  DataBlob_PrimitiveSphere* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataBlob_PrimitiveSphere& from);
  void MergeFrom(const DataBlob_PrimitiveSphere& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .raytracer.DataBlob.Vec3f position = 1;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 1;
  inline const ::raytracer::DataBlob_Vec3f& position() const;
  inline ::raytracer::DataBlob_Vec3f* mutable_position();
  
  // required float size = 2;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 2;
  inline float size() const;
  inline void set_size(float value);
  
  // @@protoc_insertion_point(class_scope:raytracer.DataBlob.PrimitiveSphere)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::raytracer::DataBlob_Vec3f* position_;
  float size_;
  friend void  protobuf_AddDesc_raytracer_2eproto();
  friend void protobuf_AssignDesc_raytracer_2eproto();
  friend void protobuf_ShutdownFile_raytracer_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DataBlob_PrimitiveSphere* default_instance_;
};
// -------------------------------------------------------------------

class DataBlob_PointLight : public ::google::protobuf::Message {
 public:
  DataBlob_PointLight();
  virtual ~DataBlob_PointLight();
  
  DataBlob_PointLight(const DataBlob_PointLight& from);
  
  inline DataBlob_PointLight& operator=(const DataBlob_PointLight& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataBlob_PointLight& default_instance();
  
  void Swap(DataBlob_PointLight* other);
  
  // implements Message ----------------------------------------------
  
  DataBlob_PointLight* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataBlob_PointLight& from);
  void MergeFrom(const DataBlob_PointLight& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .raytracer.DataBlob.Vec3f position = 1;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 1;
  inline const ::raytracer::DataBlob_Vec3f& position() const;
  inline ::raytracer::DataBlob_Vec3f* mutable_position();
  
  // @@protoc_insertion_point(class_scope:raytracer.DataBlob.PointLight)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::raytracer::DataBlob_Vec3f* position_;
  friend void  protobuf_AddDesc_raytracer_2eproto();
  friend void protobuf_AssignDesc_raytracer_2eproto();
  friend void protobuf_ShutdownFile_raytracer_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DataBlob_PointLight* default_instance_;
};
// -------------------------------------------------------------------

class DataBlob_Camera : public ::google::protobuf::Message {
 public:
  DataBlob_Camera();
  virtual ~DataBlob_Camera();
  
  DataBlob_Camera(const DataBlob_Camera& from);
  
  inline DataBlob_Camera& operator=(const DataBlob_Camera& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataBlob_Camera& default_instance();
  
  void Swap(DataBlob_Camera* other);
  
  // implements Message ----------------------------------------------
  
  DataBlob_Camera* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataBlob_Camera& from);
  void MergeFrom(const DataBlob_Camera& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .raytracer.DataBlob.Vec3f position = 1;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 1;
  inline const ::raytracer::DataBlob_Vec3f& position() const;
  inline ::raytracer::DataBlob_Vec3f* mutable_position();
  
  // required float orient_x = 2;
  inline bool has_orient_x() const;
  inline void clear_orient_x();
  static const int kOrientXFieldNumber = 2;
  inline float orient_x() const;
  inline void set_orient_x(float value);
  
  // required float orient_y = 3;
  inline bool has_orient_y() const;
  inline void clear_orient_y();
  static const int kOrientYFieldNumber = 3;
  inline float orient_y() const;
  inline void set_orient_y(float value);
  
  // required float orient_z = 4;
  inline bool has_orient_z() const;
  inline void clear_orient_z();
  static const int kOrientZFieldNumber = 4;
  inline float orient_z() const;
  inline void set_orient_z(float value);
  
  // required float orient_w = 5;
  inline bool has_orient_w() const;
  inline void clear_orient_w();
  static const int kOrientWFieldNumber = 5;
  inline float orient_w() const;
  inline void set_orient_w(float value);
  
  // @@protoc_insertion_point(class_scope:raytracer.DataBlob.Camera)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::raytracer::DataBlob_Vec3f* position_;
  float orient_x_;
  float orient_y_;
  float orient_z_;
  float orient_w_;
  friend void  protobuf_AddDesc_raytracer_2eproto();
  friend void protobuf_AssignDesc_raytracer_2eproto();
  friend void protobuf_ShutdownFile_raytracer_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DataBlob_Camera* default_instance_;
};
// -------------------------------------------------------------------

class DataBlob_BVH : public ::google::protobuf::Message {
 public:
  DataBlob_BVH();
  virtual ~DataBlob_BVH();
  
  DataBlob_BVH(const DataBlob_BVH& from);
  
  inline DataBlob_BVH& operator=(const DataBlob_BVH& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataBlob_BVH& default_instance();
  
  void Swap(DataBlob_BVH* other);
  
  // implements Message ----------------------------------------------
  
  DataBlob_BVH* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataBlob_BVH& from);
  void MergeFrom(const DataBlob_BVH& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes nodes = 1;
  inline bool has_nodes() const;
  inline void clear_nodes();
  static const int kNodesFieldNumber = 1;
  inline const ::std::string& nodes() const;
  inline void set_nodes(const ::std::string& value);
  inline void set_nodes(const char* value);
  inline void set_nodes(const void* value, size_t size);
  inline ::std::string* mutable_nodes();
  
  // required int32 num_nodes = 2;
  inline bool has_num_nodes() const;
  inline void clear_num_nodes();
  static const int kNumNodesFieldNumber = 2;
  inline ::google::protobuf::int32 num_nodes() const;
  inline void set_num_nodes(::google::protobuf::int32 value);
  
  // required bytes index_list = 3;
  inline bool has_index_list() const;
  inline void clear_index_list();
  static const int kIndexListFieldNumber = 3;
  inline const ::std::string& index_list() const;
  inline void set_index_list(const ::std::string& value);
  inline void set_index_list(const char* value);
  inline void set_index_list(const void* value, size_t size);
  inline ::std::string* mutable_index_list();
  
  // required .raytracer.DataBlob.Vec3f minpos = 4;
  inline bool has_minpos() const;
  inline void clear_minpos();
  static const int kMinposFieldNumber = 4;
  inline const ::raytracer::DataBlob_Vec3f& minpos() const;
  inline ::raytracer::DataBlob_Vec3f* mutable_minpos();
  
  // required .raytracer.DataBlob.Vec3f maxpos = 5;
  inline bool has_maxpos() const;
  inline void clear_maxpos();
  static const int kMaxposFieldNumber = 5;
  inline const ::raytracer::DataBlob_Vec3f& maxpos() const;
  inline ::raytracer::DataBlob_Vec3f* mutable_maxpos();
  
  // @@protoc_insertion_point(class_scope:raytracer.DataBlob.BVH)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* nodes_;
  static const ::std::string _default_nodes_;
  ::google::protobuf::int32 num_nodes_;
  ::std::string* index_list_;
  static const ::std::string _default_index_list_;
  ::raytracer::DataBlob_Vec3f* minpos_;
  ::raytracer::DataBlob_Vec3f* maxpos_;
  friend void  protobuf_AddDesc_raytracer_2eproto();
  friend void protobuf_AssignDesc_raytracer_2eproto();
  friend void protobuf_ShutdownFile_raytracer_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DataBlob_BVH* default_instance_;
};
// -------------------------------------------------------------------

class DataBlob : public ::google::protobuf::Message {
 public:
  DataBlob();
  virtual ~DataBlob();
  
  DataBlob(const DataBlob& from);
  
  inline DataBlob& operator=(const DataBlob& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataBlob& default_instance();
  
  void Swap(DataBlob* other);
  
  // implements Message ----------------------------------------------
  
  DataBlob* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataBlob& from);
  void MergeFrom(const DataBlob& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DataBlob_Vec3f Vec3f;
  typedef DataBlob_PrimitiveSphere PrimitiveSphere;
  typedef DataBlob_PointLight PointLight;
  typedef DataBlob_Camera Camera;
  typedef DataBlob_BVH BVH;
  
  // accessors -------------------------------------------------------
  
  // required int32 prim_count = 1;
  inline bool has_prim_count() const;
  inline void clear_prim_count();
  static const int kPrimCountFieldNumber = 1;
  inline ::google::protobuf::int32 prim_count() const;
  inline void set_prim_count(::google::protobuf::int32 value);
  
  // required int32 light_count = 2;
  inline bool has_light_count() const;
  inline void clear_light_count();
  static const int kLightCountFieldNumber = 2;
  inline ::google::protobuf::int32 light_count() const;
  inline void set_light_count(::google::protobuf::int32 value);
  
  // repeated float samples = 3;
  inline int samples_size() const;
  inline void clear_samples();
  static const int kSamplesFieldNumber = 3;
  inline float samples(int index) const;
  inline void set_samples(int index, float value);
  inline void add_samples(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      samples() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_samples();
  
  // required int32 bounce_count = 4;
  inline bool has_bounce_count() const;
  inline void clear_bounce_count();
  static const int kBounceCountFieldNumber = 4;
  inline ::google::protobuf::int32 bounce_count() const;
  inline void set_bounce_count(::google::protobuf::int32 value);
  
  // required int32 pic_w = 5;
  inline bool has_pic_w() const;
  inline void clear_pic_w();
  static const int kPicWFieldNumber = 5;
  inline ::google::protobuf::int32 pic_w() const;
  inline void set_pic_w(::google::protobuf::int32 value);
  
  // required int32 pic_h = 6;
  inline bool has_pic_h() const;
  inline void clear_pic_h();
  static const int kPicHFieldNumber = 6;
  inline ::google::protobuf::int32 pic_h() const;
  inline void set_pic_h(::google::protobuf::int32 value);
  
  // required int32 samples_per_pixel = 7;
  inline bool has_samples_per_pixel() const;
  inline void clear_samples_per_pixel();
  static const int kSamplesPerPixelFieldNumber = 7;
  inline ::google::protobuf::int32 samples_per_pixel() const;
  inline void set_samples_per_pixel(::google::protobuf::int32 value);
  
  // required int32 interleaved_feedback = 8;
  inline bool has_interleaved_feedback() const;
  inline void clear_interleaved_feedback();
  static const int kInterleavedFeedbackFieldNumber = 8;
  inline ::google::protobuf::int32 interleaved_feedback() const;
  inline void set_interleaved_feedback(::google::protobuf::int32 value);
  
  // repeated .raytracer.DataBlob.PrimitiveSphere primitives = 9;
  inline int primitives_size() const;
  inline void clear_primitives();
  static const int kPrimitivesFieldNumber = 9;
  inline const ::raytracer::DataBlob_PrimitiveSphere& primitives(int index) const;
  inline ::raytracer::DataBlob_PrimitiveSphere* mutable_primitives(int index);
  inline ::raytracer::DataBlob_PrimitiveSphere* add_primitives();
  inline const ::google::protobuf::RepeatedPtrField< ::raytracer::DataBlob_PrimitiveSphere >&
      primitives() const;
  inline ::google::protobuf::RepeatedPtrField< ::raytracer::DataBlob_PrimitiveSphere >*
      mutable_primitives();
  
  // repeated .raytracer.DataBlob.PointLight lights = 10;
  inline int lights_size() const;
  inline void clear_lights();
  static const int kLightsFieldNumber = 10;
  inline const ::raytracer::DataBlob_PointLight& lights(int index) const;
  inline ::raytracer::DataBlob_PointLight* mutable_lights(int index);
  inline ::raytracer::DataBlob_PointLight* add_lights();
  inline const ::google::protobuf::RepeatedPtrField< ::raytracer::DataBlob_PointLight >&
      lights() const;
  inline ::google::protobuf::RepeatedPtrField< ::raytracer::DataBlob_PointLight >*
      mutable_lights();
  
  // required .raytracer.DataBlob.Camera cam = 11;
  inline bool has_cam() const;
  inline void clear_cam();
  static const int kCamFieldNumber = 11;
  inline const ::raytracer::DataBlob_Camera& cam() const;
  inline ::raytracer::DataBlob_Camera* mutable_cam();
  
  // required bytes primitive_data = 12;
  inline bool has_primitive_data() const;
  inline void clear_primitive_data();
  static const int kPrimitiveDataFieldNumber = 12;
  inline const ::std::string& primitive_data() const;
  inline void set_primitive_data(const ::std::string& value);
  inline void set_primitive_data(const char* value);
  inline void set_primitive_data(const void* value, size_t size);
  inline ::std::string* mutable_primitive_data();
  
  // required bytes materials = 13;
  inline bool has_materials() const;
  inline void clear_materials();
  static const int kMaterialsFieldNumber = 13;
  inline const ::std::string& materials() const;
  inline void set_materials(const ::std::string& value);
  inline void set_materials(const char* value);
  inline void set_materials(const void* value, size_t size);
  inline ::std::string* mutable_materials();
  
  // required .raytracer.DataBlob.BVH tree = 14;
  inline bool has_tree() const;
  inline void clear_tree();
  static const int kTreeFieldNumber = 14;
  inline const ::raytracer::DataBlob_BVH& tree() const;
  inline ::raytracer::DataBlob_BVH* mutable_tree();
  
  // @@protoc_insertion_point(class_scope:raytracer.DataBlob)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 prim_count_;
  ::google::protobuf::int32 light_count_;
  ::google::protobuf::RepeatedField< float > samples_;
  ::google::protobuf::int32 bounce_count_;
  ::google::protobuf::int32 pic_w_;
  ::google::protobuf::int32 pic_h_;
  ::google::protobuf::int32 samples_per_pixel_;
  ::google::protobuf::int32 interleaved_feedback_;
  ::google::protobuf::RepeatedPtrField< ::raytracer::DataBlob_PrimitiveSphere > primitives_;
  ::google::protobuf::RepeatedPtrField< ::raytracer::DataBlob_PointLight > lights_;
  ::raytracer::DataBlob_Camera* cam_;
  ::std::string* primitive_data_;
  static const ::std::string _default_primitive_data_;
  ::std::string* materials_;
  static const ::std::string _default_materials_;
  ::raytracer::DataBlob_BVH* tree_;
  friend void  protobuf_AddDesc_raytracer_2eproto();
  friend void protobuf_AssignDesc_raytracer_2eproto();
  friend void protobuf_ShutdownFile_raytracer_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DataBlob* default_instance_;
};
// -------------------------------------------------------------------

class Task : public ::google::protobuf::Message {
 public:
  Task();
  virtual ~Task();
  
  Task(const Task& from);
  
  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Task& default_instance();
  
  void Swap(Task* other);
  
  // implements Message ----------------------------------------------
  
  Task* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Task& from);
  void MergeFrom(const Task& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // required int32 x = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);
  
  // required int32 y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);
  
  // required int32 w = 4;
  inline bool has_w() const;
  inline void clear_w();
  static const int kWFieldNumber = 4;
  inline ::google::protobuf::int32 w() const;
  inline void set_w(::google::protobuf::int32 value);
  
  // required int32 h = 5;
  inline bool has_h() const;
  inline void clear_h();
  static const int kHFieldNumber = 5;
  inline ::google::protobuf::int32 h() const;
  inline void set_h(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:raytracer.Task)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 w_;
  ::google::protobuf::int32 h_;
  friend void  protobuf_AddDesc_raytracer_2eproto();
  friend void protobuf_AssignDesc_raytracer_2eproto();
  friend void protobuf_ShutdownFile_raytracer_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Task* default_instance_;
};
// -------------------------------------------------------------------

class Result : public ::google::protobuf::Message {
 public:
  Result();
  virtual ~Result();
  
  Result(const Result& from);
  
  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Result& default_instance();
  
  void Swap(Result* other);
  
  // implements Message ----------------------------------------------
  
  Result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Result& from);
  void MergeFrom(const Result& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // required int32 x = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);
  
  // required int32 y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);
  
  // required int32 w = 4;
  inline bool has_w() const;
  inline void clear_w();
  static const int kWFieldNumber = 4;
  inline ::google::protobuf::int32 w() const;
  inline void set_w(::google::protobuf::int32 value);
  
  // required int32 h = 5;
  inline bool has_h() const;
  inline void clear_h();
  static const int kHFieldNumber = 5;
  inline ::google::protobuf::int32 h() const;
  inline void set_h(::google::protobuf::int32 value);
  
  // required bool final = 6;
  inline bool has_final() const;
  inline void clear_final();
  static const int kFinalFieldNumber = 6;
  inline bool final() const;
  inline void set_final(bool value);
  
  // required int32 size = 7;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 7;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);
  
  // required bytes data = 8;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 8;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  
  // @@protoc_insertion_point(class_scope:raytracer.Result)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 w_;
  ::google::protobuf::int32 h_;
  bool final_;
  ::google::protobuf::int32 size_;
  ::std::string* data_;
  static const ::std::string _default_data_;
  friend void  protobuf_AddDesc_raytracer_2eproto();
  friend void protobuf_AssignDesc_raytracer_2eproto();
  friend void protobuf_ShutdownFile_raytracer_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Result* default_instance_;
};
// ===================================================================


// ===================================================================

// DataBlob_Vec3f

// required float x = 1;
inline bool DataBlob_Vec3f::has_x() const {
  return _has_bit(0);
}
inline void DataBlob_Vec3f::clear_x() {
  x_ = 0;
  _clear_bit(0);
}
inline float DataBlob_Vec3f::x() const {
  return x_;
}
inline void DataBlob_Vec3f::set_x(float value) {
  _set_bit(0);
  x_ = value;
}

// required float y = 2;
inline bool DataBlob_Vec3f::has_y() const {
  return _has_bit(1);
}
inline void DataBlob_Vec3f::clear_y() {
  y_ = 0;
  _clear_bit(1);
}
inline float DataBlob_Vec3f::y() const {
  return y_;
}
inline void DataBlob_Vec3f::set_y(float value) {
  _set_bit(1);
  y_ = value;
}

// required float z = 3;
inline bool DataBlob_Vec3f::has_z() const {
  return _has_bit(2);
}
inline void DataBlob_Vec3f::clear_z() {
  z_ = 0;
  _clear_bit(2);
}
inline float DataBlob_Vec3f::z() const {
  return z_;
}
inline void DataBlob_Vec3f::set_z(float value) {
  _set_bit(2);
  z_ = value;
}

// -------------------------------------------------------------------

// DataBlob_PrimitiveSphere

// required .raytracer.DataBlob.Vec3f position = 1;
inline bool DataBlob_PrimitiveSphere::has_position() const {
  return _has_bit(0);
}
inline void DataBlob_PrimitiveSphere::clear_position() {
  if (position_ != NULL) position_->::raytracer::DataBlob_Vec3f::Clear();
  _clear_bit(0);
}
inline const ::raytracer::DataBlob_Vec3f& DataBlob_PrimitiveSphere::position() const {
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::raytracer::DataBlob_Vec3f* DataBlob_PrimitiveSphere::mutable_position() {
  _set_bit(0);
  if (position_ == NULL) position_ = new ::raytracer::DataBlob_Vec3f;
  return position_;
}

// required float size = 2;
inline bool DataBlob_PrimitiveSphere::has_size() const {
  return _has_bit(1);
}
inline void DataBlob_PrimitiveSphere::clear_size() {
  size_ = 0;
  _clear_bit(1);
}
inline float DataBlob_PrimitiveSphere::size() const {
  return size_;
}
inline void DataBlob_PrimitiveSphere::set_size(float value) {
  _set_bit(1);
  size_ = value;
}

// -------------------------------------------------------------------

// DataBlob_PointLight

// required .raytracer.DataBlob.Vec3f position = 1;
inline bool DataBlob_PointLight::has_position() const {
  return _has_bit(0);
}
inline void DataBlob_PointLight::clear_position() {
  if (position_ != NULL) position_->::raytracer::DataBlob_Vec3f::Clear();
  _clear_bit(0);
}
inline const ::raytracer::DataBlob_Vec3f& DataBlob_PointLight::position() const {
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::raytracer::DataBlob_Vec3f* DataBlob_PointLight::mutable_position() {
  _set_bit(0);
  if (position_ == NULL) position_ = new ::raytracer::DataBlob_Vec3f;
  return position_;
}

// -------------------------------------------------------------------

// DataBlob_Camera

// required .raytracer.DataBlob.Vec3f position = 1;
inline bool DataBlob_Camera::has_position() const {
  return _has_bit(0);
}
inline void DataBlob_Camera::clear_position() {
  if (position_ != NULL) position_->::raytracer::DataBlob_Vec3f::Clear();
  _clear_bit(0);
}
inline const ::raytracer::DataBlob_Vec3f& DataBlob_Camera::position() const {
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::raytracer::DataBlob_Vec3f* DataBlob_Camera::mutable_position() {
  _set_bit(0);
  if (position_ == NULL) position_ = new ::raytracer::DataBlob_Vec3f;
  return position_;
}

// required float orient_x = 2;
inline bool DataBlob_Camera::has_orient_x() const {
  return _has_bit(1);
}
inline void DataBlob_Camera::clear_orient_x() {
  orient_x_ = 0;
  _clear_bit(1);
}
inline float DataBlob_Camera::orient_x() const {
  return orient_x_;
}
inline void DataBlob_Camera::set_orient_x(float value) {
  _set_bit(1);
  orient_x_ = value;
}

// required float orient_y = 3;
inline bool DataBlob_Camera::has_orient_y() const {
  return _has_bit(2);
}
inline void DataBlob_Camera::clear_orient_y() {
  orient_y_ = 0;
  _clear_bit(2);
}
inline float DataBlob_Camera::orient_y() const {
  return orient_y_;
}
inline void DataBlob_Camera::set_orient_y(float value) {
  _set_bit(2);
  orient_y_ = value;
}

// required float orient_z = 4;
inline bool DataBlob_Camera::has_orient_z() const {
  return _has_bit(3);
}
inline void DataBlob_Camera::clear_orient_z() {
  orient_z_ = 0;
  _clear_bit(3);
}
inline float DataBlob_Camera::orient_z() const {
  return orient_z_;
}
inline void DataBlob_Camera::set_orient_z(float value) {
  _set_bit(3);
  orient_z_ = value;
}

// required float orient_w = 5;
inline bool DataBlob_Camera::has_orient_w() const {
  return _has_bit(4);
}
inline void DataBlob_Camera::clear_orient_w() {
  orient_w_ = 0;
  _clear_bit(4);
}
inline float DataBlob_Camera::orient_w() const {
  return orient_w_;
}
inline void DataBlob_Camera::set_orient_w(float value) {
  _set_bit(4);
  orient_w_ = value;
}

// -------------------------------------------------------------------

// DataBlob_BVH

// required bytes nodes = 1;
inline bool DataBlob_BVH::has_nodes() const {
  return _has_bit(0);
}
inline void DataBlob_BVH::clear_nodes() {
  if (nodes_ != &_default_nodes_) {
    nodes_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& DataBlob_BVH::nodes() const {
  return *nodes_;
}
inline void DataBlob_BVH::set_nodes(const ::std::string& value) {
  _set_bit(0);
  if (nodes_ == &_default_nodes_) {
    nodes_ = new ::std::string;
  }
  nodes_->assign(value);
}
inline void DataBlob_BVH::set_nodes(const char* value) {
  _set_bit(0);
  if (nodes_ == &_default_nodes_) {
    nodes_ = new ::std::string;
  }
  nodes_->assign(value);
}
inline void DataBlob_BVH::set_nodes(const void* value, size_t size) {
  _set_bit(0);
  if (nodes_ == &_default_nodes_) {
    nodes_ = new ::std::string;
  }
  nodes_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataBlob_BVH::mutable_nodes() {
  _set_bit(0);
  if (nodes_ == &_default_nodes_) {
    nodes_ = new ::std::string;
  }
  return nodes_;
}

// required int32 num_nodes = 2;
inline bool DataBlob_BVH::has_num_nodes() const {
  return _has_bit(1);
}
inline void DataBlob_BVH::clear_num_nodes() {
  num_nodes_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DataBlob_BVH::num_nodes() const {
  return num_nodes_;
}
inline void DataBlob_BVH::set_num_nodes(::google::protobuf::int32 value) {
  _set_bit(1);
  num_nodes_ = value;
}

// required bytes index_list = 3;
inline bool DataBlob_BVH::has_index_list() const {
  return _has_bit(2);
}
inline void DataBlob_BVH::clear_index_list() {
  if (index_list_ != &_default_index_list_) {
    index_list_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& DataBlob_BVH::index_list() const {
  return *index_list_;
}
inline void DataBlob_BVH::set_index_list(const ::std::string& value) {
  _set_bit(2);
  if (index_list_ == &_default_index_list_) {
    index_list_ = new ::std::string;
  }
  index_list_->assign(value);
}
inline void DataBlob_BVH::set_index_list(const char* value) {
  _set_bit(2);
  if (index_list_ == &_default_index_list_) {
    index_list_ = new ::std::string;
  }
  index_list_->assign(value);
}
inline void DataBlob_BVH::set_index_list(const void* value, size_t size) {
  _set_bit(2);
  if (index_list_ == &_default_index_list_) {
    index_list_ = new ::std::string;
  }
  index_list_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataBlob_BVH::mutable_index_list() {
  _set_bit(2);
  if (index_list_ == &_default_index_list_) {
    index_list_ = new ::std::string;
  }
  return index_list_;
}

// required .raytracer.DataBlob.Vec3f minpos = 4;
inline bool DataBlob_BVH::has_minpos() const {
  return _has_bit(3);
}
inline void DataBlob_BVH::clear_minpos() {
  if (minpos_ != NULL) minpos_->::raytracer::DataBlob_Vec3f::Clear();
  _clear_bit(3);
}
inline const ::raytracer::DataBlob_Vec3f& DataBlob_BVH::minpos() const {
  return minpos_ != NULL ? *minpos_ : *default_instance_->minpos_;
}
inline ::raytracer::DataBlob_Vec3f* DataBlob_BVH::mutable_minpos() {
  _set_bit(3);
  if (minpos_ == NULL) minpos_ = new ::raytracer::DataBlob_Vec3f;
  return minpos_;
}

// required .raytracer.DataBlob.Vec3f maxpos = 5;
inline bool DataBlob_BVH::has_maxpos() const {
  return _has_bit(4);
}
inline void DataBlob_BVH::clear_maxpos() {
  if (maxpos_ != NULL) maxpos_->::raytracer::DataBlob_Vec3f::Clear();
  _clear_bit(4);
}
inline const ::raytracer::DataBlob_Vec3f& DataBlob_BVH::maxpos() const {
  return maxpos_ != NULL ? *maxpos_ : *default_instance_->maxpos_;
}
inline ::raytracer::DataBlob_Vec3f* DataBlob_BVH::mutable_maxpos() {
  _set_bit(4);
  if (maxpos_ == NULL) maxpos_ = new ::raytracer::DataBlob_Vec3f;
  return maxpos_;
}

// -------------------------------------------------------------------

// DataBlob

// required int32 prim_count = 1;
inline bool DataBlob::has_prim_count() const {
  return _has_bit(0);
}
inline void DataBlob::clear_prim_count() {
  prim_count_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 DataBlob::prim_count() const {
  return prim_count_;
}
inline void DataBlob::set_prim_count(::google::protobuf::int32 value) {
  _set_bit(0);
  prim_count_ = value;
}

// required int32 light_count = 2;
inline bool DataBlob::has_light_count() const {
  return _has_bit(1);
}
inline void DataBlob::clear_light_count() {
  light_count_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 DataBlob::light_count() const {
  return light_count_;
}
inline void DataBlob::set_light_count(::google::protobuf::int32 value) {
  _set_bit(1);
  light_count_ = value;
}

// repeated float samples = 3;
inline int DataBlob::samples_size() const {
  return samples_.size();
}
inline void DataBlob::clear_samples() {
  samples_.Clear();
}
inline float DataBlob::samples(int index) const {
  return samples_.Get(index);
}
inline void DataBlob::set_samples(int index, float value) {
  samples_.Set(index, value);
}
inline void DataBlob::add_samples(float value) {
  samples_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
DataBlob::samples() const {
  return samples_;
}
inline ::google::protobuf::RepeatedField< float >*
DataBlob::mutable_samples() {
  return &samples_;
}

// required int32 bounce_count = 4;
inline bool DataBlob::has_bounce_count() const {
  return _has_bit(3);
}
inline void DataBlob::clear_bounce_count() {
  bounce_count_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 DataBlob::bounce_count() const {
  return bounce_count_;
}
inline void DataBlob::set_bounce_count(::google::protobuf::int32 value) {
  _set_bit(3);
  bounce_count_ = value;
}

// required int32 pic_w = 5;
inline bool DataBlob::has_pic_w() const {
  return _has_bit(4);
}
inline void DataBlob::clear_pic_w() {
  pic_w_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 DataBlob::pic_w() const {
  return pic_w_;
}
inline void DataBlob::set_pic_w(::google::protobuf::int32 value) {
  _set_bit(4);
  pic_w_ = value;
}

// required int32 pic_h = 6;
inline bool DataBlob::has_pic_h() const {
  return _has_bit(5);
}
inline void DataBlob::clear_pic_h() {
  pic_h_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 DataBlob::pic_h() const {
  return pic_h_;
}
inline void DataBlob::set_pic_h(::google::protobuf::int32 value) {
  _set_bit(5);
  pic_h_ = value;
}

// required int32 samples_per_pixel = 7;
inline bool DataBlob::has_samples_per_pixel() const {
  return _has_bit(6);
}
inline void DataBlob::clear_samples_per_pixel() {
  samples_per_pixel_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 DataBlob::samples_per_pixel() const {
  return samples_per_pixel_;
}
inline void DataBlob::set_samples_per_pixel(::google::protobuf::int32 value) {
  _set_bit(6);
  samples_per_pixel_ = value;
}

// required int32 interleaved_feedback = 8;
inline bool DataBlob::has_interleaved_feedback() const {
  return _has_bit(7);
}
inline void DataBlob::clear_interleaved_feedback() {
  interleaved_feedback_ = 0;
  _clear_bit(7);
}
inline ::google::protobuf::int32 DataBlob::interleaved_feedback() const {
  return interleaved_feedback_;
}
inline void DataBlob::set_interleaved_feedback(::google::protobuf::int32 value) {
  _set_bit(7);
  interleaved_feedback_ = value;
}

// repeated .raytracer.DataBlob.PrimitiveSphere primitives = 9;
inline int DataBlob::primitives_size() const {
  return primitives_.size();
}
inline void DataBlob::clear_primitives() {
  primitives_.Clear();
}
inline const ::raytracer::DataBlob_PrimitiveSphere& DataBlob::primitives(int index) const {
  return primitives_.Get(index);
}
inline ::raytracer::DataBlob_PrimitiveSphere* DataBlob::mutable_primitives(int index) {
  return primitives_.Mutable(index);
}
inline ::raytracer::DataBlob_PrimitiveSphere* DataBlob::add_primitives() {
  return primitives_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::raytracer::DataBlob_PrimitiveSphere >&
DataBlob::primitives() const {
  return primitives_;
}
inline ::google::protobuf::RepeatedPtrField< ::raytracer::DataBlob_PrimitiveSphere >*
DataBlob::mutable_primitives() {
  return &primitives_;
}

// repeated .raytracer.DataBlob.PointLight lights = 10;
inline int DataBlob::lights_size() const {
  return lights_.size();
}
inline void DataBlob::clear_lights() {
  lights_.Clear();
}
inline const ::raytracer::DataBlob_PointLight& DataBlob::lights(int index) const {
  return lights_.Get(index);
}
inline ::raytracer::DataBlob_PointLight* DataBlob::mutable_lights(int index) {
  return lights_.Mutable(index);
}
inline ::raytracer::DataBlob_PointLight* DataBlob::add_lights() {
  return lights_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::raytracer::DataBlob_PointLight >&
DataBlob::lights() const {
  return lights_;
}
inline ::google::protobuf::RepeatedPtrField< ::raytracer::DataBlob_PointLight >*
DataBlob::mutable_lights() {
  return &lights_;
}

// required .raytracer.DataBlob.Camera cam = 11;
inline bool DataBlob::has_cam() const {
  return _has_bit(10);
}
inline void DataBlob::clear_cam() {
  if (cam_ != NULL) cam_->::raytracer::DataBlob_Camera::Clear();
  _clear_bit(10);
}
inline const ::raytracer::DataBlob_Camera& DataBlob::cam() const {
  return cam_ != NULL ? *cam_ : *default_instance_->cam_;
}
inline ::raytracer::DataBlob_Camera* DataBlob::mutable_cam() {
  _set_bit(10);
  if (cam_ == NULL) cam_ = new ::raytracer::DataBlob_Camera;
  return cam_;
}

// required bytes primitive_data = 12;
inline bool DataBlob::has_primitive_data() const {
  return _has_bit(11);
}
inline void DataBlob::clear_primitive_data() {
  if (primitive_data_ != &_default_primitive_data_) {
    primitive_data_->clear();
  }
  _clear_bit(11);
}
inline const ::std::string& DataBlob::primitive_data() const {
  return *primitive_data_;
}
inline void DataBlob::set_primitive_data(const ::std::string& value) {
  _set_bit(11);
  if (primitive_data_ == &_default_primitive_data_) {
    primitive_data_ = new ::std::string;
  }
  primitive_data_->assign(value);
}
inline void DataBlob::set_primitive_data(const char* value) {
  _set_bit(11);
  if (primitive_data_ == &_default_primitive_data_) {
    primitive_data_ = new ::std::string;
  }
  primitive_data_->assign(value);
}
inline void DataBlob::set_primitive_data(const void* value, size_t size) {
  _set_bit(11);
  if (primitive_data_ == &_default_primitive_data_) {
    primitive_data_ = new ::std::string;
  }
  primitive_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataBlob::mutable_primitive_data() {
  _set_bit(11);
  if (primitive_data_ == &_default_primitive_data_) {
    primitive_data_ = new ::std::string;
  }
  return primitive_data_;
}

// required bytes materials = 13;
inline bool DataBlob::has_materials() const {
  return _has_bit(12);
}
inline void DataBlob::clear_materials() {
  if (materials_ != &_default_materials_) {
    materials_->clear();
  }
  _clear_bit(12);
}
inline const ::std::string& DataBlob::materials() const {
  return *materials_;
}
inline void DataBlob::set_materials(const ::std::string& value) {
  _set_bit(12);
  if (materials_ == &_default_materials_) {
    materials_ = new ::std::string;
  }
  materials_->assign(value);
}
inline void DataBlob::set_materials(const char* value) {
  _set_bit(12);
  if (materials_ == &_default_materials_) {
    materials_ = new ::std::string;
  }
  materials_->assign(value);
}
inline void DataBlob::set_materials(const void* value, size_t size) {
  _set_bit(12);
  if (materials_ == &_default_materials_) {
    materials_ = new ::std::string;
  }
  materials_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataBlob::mutable_materials() {
  _set_bit(12);
  if (materials_ == &_default_materials_) {
    materials_ = new ::std::string;
  }
  return materials_;
}

// required .raytracer.DataBlob.BVH tree = 14;
inline bool DataBlob::has_tree() const {
  return _has_bit(13);
}
inline void DataBlob::clear_tree() {
  if (tree_ != NULL) tree_->::raytracer::DataBlob_BVH::Clear();
  _clear_bit(13);
}
inline const ::raytracer::DataBlob_BVH& DataBlob::tree() const {
  return tree_ != NULL ? *tree_ : *default_instance_->tree_;
}
inline ::raytracer::DataBlob_BVH* DataBlob::mutable_tree() {
  _set_bit(13);
  if (tree_ == NULL) tree_ = new ::raytracer::DataBlob_BVH;
  return tree_;
}

// -------------------------------------------------------------------

// Task

// required int32 id = 1;
inline bool Task::has_id() const {
  return _has_bit(0);
}
inline void Task::clear_id() {
  id_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 Task::id() const {
  return id_;
}
inline void Task::set_id(::google::protobuf::int32 value) {
  _set_bit(0);
  id_ = value;
}

// required int32 x = 2;
inline bool Task::has_x() const {
  return _has_bit(1);
}
inline void Task::clear_x() {
  x_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 Task::x() const {
  return x_;
}
inline void Task::set_x(::google::protobuf::int32 value) {
  _set_bit(1);
  x_ = value;
}

// required int32 y = 3;
inline bool Task::has_y() const {
  return _has_bit(2);
}
inline void Task::clear_y() {
  y_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 Task::y() const {
  return y_;
}
inline void Task::set_y(::google::protobuf::int32 value) {
  _set_bit(2);
  y_ = value;
}

// required int32 w = 4;
inline bool Task::has_w() const {
  return _has_bit(3);
}
inline void Task::clear_w() {
  w_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 Task::w() const {
  return w_;
}
inline void Task::set_w(::google::protobuf::int32 value) {
  _set_bit(3);
  w_ = value;
}

// required int32 h = 5;
inline bool Task::has_h() const {
  return _has_bit(4);
}
inline void Task::clear_h() {
  h_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 Task::h() const {
  return h_;
}
inline void Task::set_h(::google::protobuf::int32 value) {
  _set_bit(4);
  h_ = value;
}

// -------------------------------------------------------------------

// Result

// required int32 id = 1;
inline bool Result::has_id() const {
  return _has_bit(0);
}
inline void Result::clear_id() {
  id_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 Result::id() const {
  return id_;
}
inline void Result::set_id(::google::protobuf::int32 value) {
  _set_bit(0);
  id_ = value;
}

// required int32 x = 2;
inline bool Result::has_x() const {
  return _has_bit(1);
}
inline void Result::clear_x() {
  x_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 Result::x() const {
  return x_;
}
inline void Result::set_x(::google::protobuf::int32 value) {
  _set_bit(1);
  x_ = value;
}

// required int32 y = 3;
inline bool Result::has_y() const {
  return _has_bit(2);
}
inline void Result::clear_y() {
  y_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 Result::y() const {
  return y_;
}
inline void Result::set_y(::google::protobuf::int32 value) {
  _set_bit(2);
  y_ = value;
}

// required int32 w = 4;
inline bool Result::has_w() const {
  return _has_bit(3);
}
inline void Result::clear_w() {
  w_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 Result::w() const {
  return w_;
}
inline void Result::set_w(::google::protobuf::int32 value) {
  _set_bit(3);
  w_ = value;
}

// required int32 h = 5;
inline bool Result::has_h() const {
  return _has_bit(4);
}
inline void Result::clear_h() {
  h_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 Result::h() const {
  return h_;
}
inline void Result::set_h(::google::protobuf::int32 value) {
  _set_bit(4);
  h_ = value;
}

// required bool final = 6;
inline bool Result::has_final() const {
  return _has_bit(5);
}
inline void Result::clear_final() {
  final_ = false;
  _clear_bit(5);
}
inline bool Result::final() const {
  return final_;
}
inline void Result::set_final(bool value) {
  _set_bit(5);
  final_ = value;
}

// required int32 size = 7;
inline bool Result::has_size() const {
  return _has_bit(6);
}
inline void Result::clear_size() {
  size_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 Result::size() const {
  return size_;
}
inline void Result::set_size(::google::protobuf::int32 value) {
  _set_bit(6);
  size_ = value;
}

// required bytes data = 8;
inline bool Result::has_data() const {
  return _has_bit(7);
}
inline void Result::clear_data() {
  if (data_ != &_default_data_) {
    data_->clear();
  }
  _clear_bit(7);
}
inline const ::std::string& Result::data() const {
  return *data_;
}
inline void Result::set_data(const ::std::string& value) {
  _set_bit(7);
  if (data_ == &_default_data_) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void Result::set_data(const char* value) {
  _set_bit(7);
  if (data_ == &_default_data_) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void Result::set_data(const void* value, size_t size) {
  _set_bit(7);
  if (data_ == &_default_data_) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Result::mutable_data() {
  _set_bit(7);
  if (data_ == &_default_data_) {
    data_ = new ::std::string;
  }
  return data_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace raytracer

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_raytracer_2eproto__INCLUDED
