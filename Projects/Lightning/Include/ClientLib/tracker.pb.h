// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tracker.proto

#ifndef PROTOBUF_tracker_2eproto__INCLUDED
#define PROTOBUF_tracker_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace tracker {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_tracker_2eproto();
void protobuf_AssignDesc_tracker_2eproto();
void protobuf_ShutdownFile_tracker_2eproto();

class HelloToTracker;
class HelloToClient;
class NewBatch;
class NodesRequest;
class NodesResponse;
class NodesResponse_Node;
class NodeAvailable;
class NodeConnection;

enum NewBatch_BatchType {
  NewBatch_BatchType_RAYTRACE = 0,
  NewBatch_BatchType_PHOTSHOOTAH = 1
};
bool NewBatch_BatchType_IsValid(int value);
const NewBatch_BatchType NewBatch_BatchType_BatchType_MIN = NewBatch_BatchType_RAYTRACE;
const NewBatch_BatchType NewBatch_BatchType_BatchType_MAX = NewBatch_BatchType_PHOTSHOOTAH;
const int NewBatch_BatchType_BatchType_ARRAYSIZE = NewBatch_BatchType_BatchType_MAX + 1;

const ::google::protobuf::EnumDescriptor* NewBatch_BatchType_descriptor();
inline const ::std::string& NewBatch_BatchType_Name(NewBatch_BatchType value) {
  return ::google::protobuf::internal::NameOfEnum(
    NewBatch_BatchType_descriptor(), value);
}
inline bool NewBatch_BatchType_Parse(
    const ::std::string& name, NewBatch_BatchType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NewBatch_BatchType>(
    NewBatch_BatchType_descriptor(), name, value);
}
// ===================================================================

class HelloToTracker : public ::google::protobuf::Message {
 public:
  HelloToTracker();
  virtual ~HelloToTracker();
  
  HelloToTracker(const HelloToTracker& from);
  
  inline HelloToTracker& operator=(const HelloToTracker& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const HelloToTracker& default_instance();
  
  void Swap(HelloToTracker* other);
  
  // implements Message ----------------------------------------------
  
  HelloToTracker* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HelloToTracker& from);
  void MergeFrom(const HelloToTracker& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 session_id = 1;
  inline bool has_session_id() const;
  inline void clear_session_id();
  static const int kSessionIdFieldNumber = 1;
  inline ::google::protobuf::int32 session_id() const;
  inline void set_session_id(::google::protobuf::int32 value);
  
  // required string address = 2;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 2;
  inline const ::std::string& address() const;
  inline void set_address(const ::std::string& value);
  inline void set_address(const char* value);
  inline void set_address(const char* value, size_t size);
  inline ::std::string* mutable_address();
  
  // required int32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);
  
  // required int32 client_port = 4;
  inline bool has_client_port() const;
  inline void clear_client_port();
  static const int kClientPortFieldNumber = 4;
  inline ::google::protobuf::int32 client_port() const;
  inline void set_client_port(::google::protobuf::int32 value);
  
  // required int32 available = 5;
  inline bool has_available() const;
  inline void clear_available();
  static const int kAvailableFieldNumber = 5;
  inline ::google::protobuf::int32 available() const;
  inline void set_available(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:tracker.HelloToTracker)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 session_id_;
  ::std::string* address_;
  static const ::std::string _default_address_;
  ::google::protobuf::int32 port_;
  ::google::protobuf::int32 client_port_;
  ::google::protobuf::int32 available_;
  friend void  protobuf_AddDesc_tracker_2eproto();
  friend void protobuf_AssignDesc_tracker_2eproto();
  friend void protobuf_ShutdownFile_tracker_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static HelloToTracker* default_instance_;
};
// -------------------------------------------------------------------

class HelloToClient : public ::google::protobuf::Message {
 public:
  HelloToClient();
  virtual ~HelloToClient();
  
  HelloToClient(const HelloToClient& from);
  
  inline HelloToClient& operator=(const HelloToClient& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const HelloToClient& default_instance();
  
  void Swap(HelloToClient* other);
  
  // implements Message ----------------------------------------------
  
  HelloToClient* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HelloToClient& from);
  void MergeFrom(const HelloToClient& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 session_id = 1;
  inline bool has_session_id() const;
  inline void clear_session_id();
  static const int kSessionIdFieldNumber = 1;
  inline ::google::protobuf::int32 session_id() const;
  inline void set_session_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:tracker.HelloToClient)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 session_id_;
  friend void  protobuf_AddDesc_tracker_2eproto();
  friend void protobuf_AssignDesc_tracker_2eproto();
  friend void protobuf_ShutdownFile_tracker_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static HelloToClient* default_instance_;
};
// -------------------------------------------------------------------

class NewBatch : public ::google::protobuf::Message {
 public:
  NewBatch();
  virtual ~NewBatch();
  
  NewBatch(const NewBatch& from);
  
  inline NewBatch& operator=(const NewBatch& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NewBatch& default_instance();
  
  void Swap(NewBatch* other);
  
  // implements Message ----------------------------------------------
  
  NewBatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NewBatch& from);
  void MergeFrom(const NewBatch& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NewBatch_BatchType BatchType;
  static const BatchType RAYTRACE = NewBatch_BatchType_RAYTRACE;
  static const BatchType PHOTSHOOTAH = NewBatch_BatchType_PHOTSHOOTAH;
  static inline bool BatchType_IsValid(int value) {
    return NewBatch_BatchType_IsValid(value);
  }
  static const BatchType BatchType_MIN =
    NewBatch_BatchType_BatchType_MIN;
  static const BatchType BatchType_MAX =
    NewBatch_BatchType_BatchType_MAX;
  static const int BatchType_ARRAYSIZE =
    NewBatch_BatchType_BatchType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  BatchType_descriptor() {
    return NewBatch_BatchType_descriptor();
  }
  static inline const ::std::string& BatchType_Name(BatchType value) {
    return NewBatch_BatchType_Name(value);
  }
  static inline bool BatchType_Parse(const ::std::string& name,
      BatchType* value) {
    return NewBatch_BatchType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required int32 session_id = 1;
  inline bool has_session_id() const;
  inline void clear_session_id();
  static const int kSessionIdFieldNumber = 1;
  inline ::google::protobuf::int32 session_id() const;
  inline void set_session_id(::google::protobuf::int32 value);
  
  // required string batch_hash = 2;
  inline bool has_batch_hash() const;
  inline void clear_batch_hash();
  static const int kBatchHashFieldNumber = 2;
  inline const ::std::string& batch_hash() const;
  inline void set_batch_hash(const ::std::string& value);
  inline void set_batch_hash(const char* value);
  inline void set_batch_hash(const char* value, size_t size);
  inline ::std::string* mutable_batch_hash();
  
  // required int32 tasks = 3;
  inline bool has_tasks() const;
  inline void clear_tasks();
  static const int kTasksFieldNumber = 3;
  inline ::google::protobuf::int32 tasks() const;
  inline void set_tasks(::google::protobuf::int32 value);
  
  // required .tracker.NewBatch.BatchType batch_type = 4;
  inline bool has_batch_type() const;
  inline void clear_batch_type();
  static const int kBatchTypeFieldNumber = 4;
  inline ::tracker::NewBatch_BatchType batch_type() const;
  inline void set_batch_type(::tracker::NewBatch_BatchType value);
  
  // @@protoc_insertion_point(class_scope:tracker.NewBatch)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 session_id_;
  ::std::string* batch_hash_;
  static const ::std::string _default_batch_hash_;
  ::google::protobuf::int32 tasks_;
  int batch_type_;
  friend void  protobuf_AddDesc_tracker_2eproto();
  friend void protobuf_AssignDesc_tracker_2eproto();
  friend void protobuf_ShutdownFile_tracker_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static NewBatch* default_instance_;
};
// -------------------------------------------------------------------

class NodesRequest : public ::google::protobuf::Message {
 public:
  NodesRequest();
  virtual ~NodesRequest();
  
  NodesRequest(const NodesRequest& from);
  
  inline NodesRequest& operator=(const NodesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NodesRequest& default_instance();
  
  void Swap(NodesRequest* other);
  
  // implements Message ----------------------------------------------
  
  NodesRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodesRequest& from);
  void MergeFrom(const NodesRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 session_id = 1;
  inline bool has_session_id() const;
  inline void clear_session_id();
  static const int kSessionIdFieldNumber = 1;
  inline ::google::protobuf::int32 session_id() const;
  inline void set_session_id(::google::protobuf::int32 value);
  
  // required int32 nodes = 2;
  inline bool has_nodes() const;
  inline void clear_nodes();
  static const int kNodesFieldNumber = 2;
  inline ::google::protobuf::int32 nodes() const;
  inline void set_nodes(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:tracker.NodesRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 session_id_;
  ::google::protobuf::int32 nodes_;
  friend void  protobuf_AddDesc_tracker_2eproto();
  friend void protobuf_AssignDesc_tracker_2eproto();
  friend void protobuf_ShutdownFile_tracker_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static NodesRequest* default_instance_;
};
// -------------------------------------------------------------------

class NodesResponse_Node : public ::google::protobuf::Message {
 public:
  NodesResponse_Node();
  virtual ~NodesResponse_Node();
  
  NodesResponse_Node(const NodesResponse_Node& from);
  
  inline NodesResponse_Node& operator=(const NodesResponse_Node& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NodesResponse_Node& default_instance();
  
  void Swap(NodesResponse_Node* other);
  
  // implements Message ----------------------------------------------
  
  NodesResponse_Node* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodesResponse_Node& from);
  void MergeFrom(const NodesResponse_Node& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 session_id = 1;
  inline bool has_session_id() const;
  inline void clear_session_id();
  static const int kSessionIdFieldNumber = 1;
  inline ::google::protobuf::int32 session_id() const;
  inline void set_session_id(::google::protobuf::int32 value);
  
  // required string address = 2;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 2;
  inline const ::std::string& address() const;
  inline void set_address(const ::std::string& value);
  inline void set_address(const char* value);
  inline void set_address(const char* value, size_t size);
  inline ::std::string* mutable_address();
  
  // required int32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:tracker.NodesResponse.Node)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 session_id_;
  ::std::string* address_;
  static const ::std::string _default_address_;
  ::google::protobuf::int32 port_;
  friend void  protobuf_AddDesc_tracker_2eproto();
  friend void protobuf_AssignDesc_tracker_2eproto();
  friend void protobuf_ShutdownFile_tracker_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static NodesResponse_Node* default_instance_;
};
// -------------------------------------------------------------------

class NodesResponse : public ::google::protobuf::Message {
 public:
  NodesResponse();
  virtual ~NodesResponse();
  
  NodesResponse(const NodesResponse& from);
  
  inline NodesResponse& operator=(const NodesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NodesResponse& default_instance();
  
  void Swap(NodesResponse* other);
  
  // implements Message ----------------------------------------------
  
  NodesResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodesResponse& from);
  void MergeFrom(const NodesResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NodesResponse_Node Node;
  
  // accessors -------------------------------------------------------
  
  // repeated .tracker.NodesResponse.Node nodes = 1;
  inline int nodes_size() const;
  inline void clear_nodes();
  static const int kNodesFieldNumber = 1;
  inline const ::tracker::NodesResponse_Node& nodes(int index) const;
  inline ::tracker::NodesResponse_Node* mutable_nodes(int index);
  inline ::tracker::NodesResponse_Node* add_nodes();
  inline const ::google::protobuf::RepeatedPtrField< ::tracker::NodesResponse_Node >&
      nodes() const;
  inline ::google::protobuf::RepeatedPtrField< ::tracker::NodesResponse_Node >*
      mutable_nodes();
  
  // @@protoc_insertion_point(class_scope:tracker.NodesResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::tracker::NodesResponse_Node > nodes_;
  friend void  protobuf_AddDesc_tracker_2eproto();
  friend void protobuf_AssignDesc_tracker_2eproto();
  friend void protobuf_ShutdownFile_tracker_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static NodesResponse* default_instance_;
};
// -------------------------------------------------------------------

class NodeAvailable : public ::google::protobuf::Message {
 public:
  NodeAvailable();
  virtual ~NodeAvailable();
  
  NodeAvailable(const NodeAvailable& from);
  
  inline NodeAvailable& operator=(const NodeAvailable& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeAvailable& default_instance();
  
  void Swap(NodeAvailable* other);
  
  // implements Message ----------------------------------------------
  
  NodeAvailable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodeAvailable& from);
  void MergeFrom(const NodeAvailable& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 session_id = 1;
  inline bool has_session_id() const;
  inline void clear_session_id();
  static const int kSessionIdFieldNumber = 1;
  inline ::google::protobuf::int32 session_id() const;
  inline void set_session_id(::google::protobuf::int32 value);
  
  // required int32 available = 2;
  inline bool has_available() const;
  inline void clear_available();
  static const int kAvailableFieldNumber = 2;
  inline ::google::protobuf::int32 available() const;
  inline void set_available(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:tracker.NodeAvailable)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 session_id_;
  ::google::protobuf::int32 available_;
  friend void  protobuf_AddDesc_tracker_2eproto();
  friend void protobuf_AssignDesc_tracker_2eproto();
  friend void protobuf_ShutdownFile_tracker_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static NodeAvailable* default_instance_;
};
// -------------------------------------------------------------------

class NodeConnection : public ::google::protobuf::Message {
 public:
  NodeConnection();
  virtual ~NodeConnection();
  
  NodeConnection(const NodeConnection& from);
  
  inline NodeConnection& operator=(const NodeConnection& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeConnection& default_instance();
  
  void Swap(NodeConnection* other);
  
  // implements Message ----------------------------------------------
  
  NodeConnection* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodeConnection& from);
  void MergeFrom(const NodeConnection& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 session_id = 1;
  inline bool has_session_id() const;
  inline void clear_session_id();
  static const int kSessionIdFieldNumber = 1;
  inline ::google::protobuf::int32 session_id() const;
  inline void set_session_id(::google::protobuf::int32 value);
  
  // required int32 connected_to_id = 2;
  inline bool has_connected_to_id() const;
  inline void clear_connected_to_id();
  static const int kConnectedToIdFieldNumber = 2;
  inline ::google::protobuf::int32 connected_to_id() const;
  inline void set_connected_to_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:tracker.NodeConnection)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 session_id_;
  ::google::protobuf::int32 connected_to_id_;
  friend void  protobuf_AddDesc_tracker_2eproto();
  friend void protobuf_AssignDesc_tracker_2eproto();
  friend void protobuf_ShutdownFile_tracker_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static NodeConnection* default_instance_;
};
// ===================================================================


// ===================================================================

// HelloToTracker

// required int32 session_id = 1;
inline bool HelloToTracker::has_session_id() const {
  return _has_bit(0);
}
inline void HelloToTracker::clear_session_id() {
  session_id_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 HelloToTracker::session_id() const {
  return session_id_;
}
inline void HelloToTracker::set_session_id(::google::protobuf::int32 value) {
  _set_bit(0);
  session_id_ = value;
}

// required string address = 2;
inline bool HelloToTracker::has_address() const {
  return _has_bit(1);
}
inline void HelloToTracker::clear_address() {
  if (address_ != &_default_address_) {
    address_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& HelloToTracker::address() const {
  return *address_;
}
inline void HelloToTracker::set_address(const ::std::string& value) {
  _set_bit(1);
  if (address_ == &_default_address_) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void HelloToTracker::set_address(const char* value) {
  _set_bit(1);
  if (address_ == &_default_address_) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void HelloToTracker::set_address(const char* value, size_t size) {
  _set_bit(1);
  if (address_ == &_default_address_) {
    address_ = new ::std::string;
  }
  address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HelloToTracker::mutable_address() {
  _set_bit(1);
  if (address_ == &_default_address_) {
    address_ = new ::std::string;
  }
  return address_;
}

// required int32 port = 3;
inline bool HelloToTracker::has_port() const {
  return _has_bit(2);
}
inline void HelloToTracker::clear_port() {
  port_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 HelloToTracker::port() const {
  return port_;
}
inline void HelloToTracker::set_port(::google::protobuf::int32 value) {
  _set_bit(2);
  port_ = value;
}

// required int32 client_port = 4;
inline bool HelloToTracker::has_client_port() const {
  return _has_bit(3);
}
inline void HelloToTracker::clear_client_port() {
  client_port_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 HelloToTracker::client_port() const {
  return client_port_;
}
inline void HelloToTracker::set_client_port(::google::protobuf::int32 value) {
  _set_bit(3);
  client_port_ = value;
}

// required int32 available = 5;
inline bool HelloToTracker::has_available() const {
  return _has_bit(4);
}
inline void HelloToTracker::clear_available() {
  available_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 HelloToTracker::available() const {
  return available_;
}
inline void HelloToTracker::set_available(::google::protobuf::int32 value) {
  _set_bit(4);
  available_ = value;
}

// -------------------------------------------------------------------

// HelloToClient

// required int32 session_id = 1;
inline bool HelloToClient::has_session_id() const {
  return _has_bit(0);
}
inline void HelloToClient::clear_session_id() {
  session_id_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 HelloToClient::session_id() const {
  return session_id_;
}
inline void HelloToClient::set_session_id(::google::protobuf::int32 value) {
  _set_bit(0);
  session_id_ = value;
}

// -------------------------------------------------------------------

// NewBatch

// required int32 session_id = 1;
inline bool NewBatch::has_session_id() const {
  return _has_bit(0);
}
inline void NewBatch::clear_session_id() {
  session_id_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 NewBatch::session_id() const {
  return session_id_;
}
inline void NewBatch::set_session_id(::google::protobuf::int32 value) {
  _set_bit(0);
  session_id_ = value;
}

// required string batch_hash = 2;
inline bool NewBatch::has_batch_hash() const {
  return _has_bit(1);
}
inline void NewBatch::clear_batch_hash() {
  if (batch_hash_ != &_default_batch_hash_) {
    batch_hash_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& NewBatch::batch_hash() const {
  return *batch_hash_;
}
inline void NewBatch::set_batch_hash(const ::std::string& value) {
  _set_bit(1);
  if (batch_hash_ == &_default_batch_hash_) {
    batch_hash_ = new ::std::string;
  }
  batch_hash_->assign(value);
}
inline void NewBatch::set_batch_hash(const char* value) {
  _set_bit(1);
  if (batch_hash_ == &_default_batch_hash_) {
    batch_hash_ = new ::std::string;
  }
  batch_hash_->assign(value);
}
inline void NewBatch::set_batch_hash(const char* value, size_t size) {
  _set_bit(1);
  if (batch_hash_ == &_default_batch_hash_) {
    batch_hash_ = new ::std::string;
  }
  batch_hash_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NewBatch::mutable_batch_hash() {
  _set_bit(1);
  if (batch_hash_ == &_default_batch_hash_) {
    batch_hash_ = new ::std::string;
  }
  return batch_hash_;
}

// required int32 tasks = 3;
inline bool NewBatch::has_tasks() const {
  return _has_bit(2);
}
inline void NewBatch::clear_tasks() {
  tasks_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 NewBatch::tasks() const {
  return tasks_;
}
inline void NewBatch::set_tasks(::google::protobuf::int32 value) {
  _set_bit(2);
  tasks_ = value;
}

// required .tracker.NewBatch.BatchType batch_type = 4;
inline bool NewBatch::has_batch_type() const {
  return _has_bit(3);
}
inline void NewBatch::clear_batch_type() {
  batch_type_ = 0;
  _clear_bit(3);
}
inline ::tracker::NewBatch_BatchType NewBatch::batch_type() const {
  return static_cast< ::tracker::NewBatch_BatchType >(batch_type_);
}
inline void NewBatch::set_batch_type(::tracker::NewBatch_BatchType value) {
  GOOGLE_DCHECK(::tracker::NewBatch_BatchType_IsValid(value));
  _set_bit(3);
  batch_type_ = value;
}

// -------------------------------------------------------------------

// NodesRequest

// required int32 session_id = 1;
inline bool NodesRequest::has_session_id() const {
  return _has_bit(0);
}
inline void NodesRequest::clear_session_id() {
  session_id_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 NodesRequest::session_id() const {
  return session_id_;
}
inline void NodesRequest::set_session_id(::google::protobuf::int32 value) {
  _set_bit(0);
  session_id_ = value;
}

// required int32 nodes = 2;
inline bool NodesRequest::has_nodes() const {
  return _has_bit(1);
}
inline void NodesRequest::clear_nodes() {
  nodes_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 NodesRequest::nodes() const {
  return nodes_;
}
inline void NodesRequest::set_nodes(::google::protobuf::int32 value) {
  _set_bit(1);
  nodes_ = value;
}

// -------------------------------------------------------------------

// NodesResponse_Node

// required int32 session_id = 1;
inline bool NodesResponse_Node::has_session_id() const {
  return _has_bit(0);
}
inline void NodesResponse_Node::clear_session_id() {
  session_id_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 NodesResponse_Node::session_id() const {
  return session_id_;
}
inline void NodesResponse_Node::set_session_id(::google::protobuf::int32 value) {
  _set_bit(0);
  session_id_ = value;
}

// required string address = 2;
inline bool NodesResponse_Node::has_address() const {
  return _has_bit(1);
}
inline void NodesResponse_Node::clear_address() {
  if (address_ != &_default_address_) {
    address_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& NodesResponse_Node::address() const {
  return *address_;
}
inline void NodesResponse_Node::set_address(const ::std::string& value) {
  _set_bit(1);
  if (address_ == &_default_address_) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void NodesResponse_Node::set_address(const char* value) {
  _set_bit(1);
  if (address_ == &_default_address_) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void NodesResponse_Node::set_address(const char* value, size_t size) {
  _set_bit(1);
  if (address_ == &_default_address_) {
    address_ = new ::std::string;
  }
  address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NodesResponse_Node::mutable_address() {
  _set_bit(1);
  if (address_ == &_default_address_) {
    address_ = new ::std::string;
  }
  return address_;
}

// required int32 port = 3;
inline bool NodesResponse_Node::has_port() const {
  return _has_bit(2);
}
inline void NodesResponse_Node::clear_port() {
  port_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 NodesResponse_Node::port() const {
  return port_;
}
inline void NodesResponse_Node::set_port(::google::protobuf::int32 value) {
  _set_bit(2);
  port_ = value;
}

// -------------------------------------------------------------------

// NodesResponse

// repeated .tracker.NodesResponse.Node nodes = 1;
inline int NodesResponse::nodes_size() const {
  return nodes_.size();
}
inline void NodesResponse::clear_nodes() {
  nodes_.Clear();
}
inline const ::tracker::NodesResponse_Node& NodesResponse::nodes(int index) const {
  return nodes_.Get(index);
}
inline ::tracker::NodesResponse_Node* NodesResponse::mutable_nodes(int index) {
  return nodes_.Mutable(index);
}
inline ::tracker::NodesResponse_Node* NodesResponse::add_nodes() {
  return nodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tracker::NodesResponse_Node >&
NodesResponse::nodes() const {
  return nodes_;
}
inline ::google::protobuf::RepeatedPtrField< ::tracker::NodesResponse_Node >*
NodesResponse::mutable_nodes() {
  return &nodes_;
}

// -------------------------------------------------------------------

// NodeAvailable

// required int32 session_id = 1;
inline bool NodeAvailable::has_session_id() const {
  return _has_bit(0);
}
inline void NodeAvailable::clear_session_id() {
  session_id_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 NodeAvailable::session_id() const {
  return session_id_;
}
inline void NodeAvailable::set_session_id(::google::protobuf::int32 value) {
  _set_bit(0);
  session_id_ = value;
}

// required int32 available = 2;
inline bool NodeAvailable::has_available() const {
  return _has_bit(1);
}
inline void NodeAvailable::clear_available() {
  available_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 NodeAvailable::available() const {
  return available_;
}
inline void NodeAvailable::set_available(::google::protobuf::int32 value) {
  _set_bit(1);
  available_ = value;
}

// -------------------------------------------------------------------

// NodeConnection

// required int32 session_id = 1;
inline bool NodeConnection::has_session_id() const {
  return _has_bit(0);
}
inline void NodeConnection::clear_session_id() {
  session_id_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 NodeConnection::session_id() const {
  return session_id_;
}
inline void NodeConnection::set_session_id(::google::protobuf::int32 value) {
  _set_bit(0);
  session_id_ = value;
}

// required int32 connected_to_id = 2;
inline bool NodeConnection::has_connected_to_id() const {
  return _has_bit(1);
}
inline void NodeConnection::clear_connected_to_id() {
  connected_to_id_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 NodeConnection::connected_to_id() const {
  return connected_to_id_;
}
inline void NodeConnection::set_connected_to_id(::google::protobuf::int32 value) {
  _set_bit(1);
  connected_to_id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tracker

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tracker::NewBatch_BatchType>() {
  return ::tracker::NewBatch_BatchType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tracker_2eproto__INCLUDED
