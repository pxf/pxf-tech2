// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tracker.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tracker {

namespace {

const ::google::protobuf::Descriptor* HelloToTracker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HelloToTracker_reflection_ = NULL;
const ::google::protobuf::Descriptor* HelloToClient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HelloToClient_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewBatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewBatch_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NewBatch_BatchType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NodesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodesResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodesResponse_Node_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodesResponse_Node_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeAvailable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeAvailable_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeConnection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeConnection_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tracker_2eproto() {
  protobuf_AddDesc_tracker_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tracker.proto");
  GOOGLE_CHECK(file != NULL);
  HelloToTracker_descriptor_ = file->message_type(0);
  static const int HelloToTracker_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloToTracker, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloToTracker, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloToTracker, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloToTracker, client_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloToTracker, available_),
  };
  HelloToTracker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HelloToTracker_descriptor_,
      HelloToTracker::default_instance_,
      HelloToTracker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloToTracker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloToTracker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HelloToTracker));
  HelloToClient_descriptor_ = file->message_type(1);
  static const int HelloToClient_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloToClient, session_id_),
  };
  HelloToClient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HelloToClient_descriptor_,
      HelloToClient::default_instance_,
      HelloToClient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloToClient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloToClient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HelloToClient));
  NewBatch_descriptor_ = file->message_type(2);
  static const int NewBatch_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewBatch, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewBatch, batch_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewBatch, tasks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewBatch, batch_type_),
  };
  NewBatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewBatch_descriptor_,
      NewBatch::default_instance_,
      NewBatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewBatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewBatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewBatch));
  NewBatch_BatchType_descriptor_ = NewBatch_descriptor_->enum_type(0);
  NodesRequest_descriptor_ = file->message_type(3);
  static const int NodesRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodesRequest, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodesRequest, nodes_),
  };
  NodesRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodesRequest_descriptor_,
      NodesRequest::default_instance_,
      NodesRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodesRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodesRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodesRequest));
  NodesResponse_descriptor_ = file->message_type(4);
  static const int NodesResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodesResponse, nodes_),
  };
  NodesResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodesResponse_descriptor_,
      NodesResponse::default_instance_,
      NodesResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodesResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodesResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodesResponse));
  NodesResponse_Node_descriptor_ = NodesResponse_descriptor_->nested_type(0);
  static const int NodesResponse_Node_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodesResponse_Node, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodesResponse_Node, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodesResponse_Node, port_),
  };
  NodesResponse_Node_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodesResponse_Node_descriptor_,
      NodesResponse_Node::default_instance_,
      NodesResponse_Node_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodesResponse_Node, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodesResponse_Node, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodesResponse_Node));
  NodeAvailable_descriptor_ = file->message_type(5);
  static const int NodeAvailable_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeAvailable, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeAvailable, available_),
  };
  NodeAvailable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeAvailable_descriptor_,
      NodeAvailable::default_instance_,
      NodeAvailable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeAvailable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeAvailable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeAvailable));
  NodeConnection_descriptor_ = file->message_type(6);
  static const int NodeConnection_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeConnection, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeConnection, connected_to_id_),
  };
  NodeConnection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeConnection_descriptor_,
      NodeConnection::default_instance_,
      NodeConnection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeConnection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeConnection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeConnection));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tracker_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HelloToTracker_descriptor_, &HelloToTracker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HelloToClient_descriptor_, &HelloToClient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewBatch_descriptor_, &NewBatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodesRequest_descriptor_, &NodesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodesResponse_descriptor_, &NodesResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodesResponse_Node_descriptor_, &NodesResponse_Node::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeAvailable_descriptor_, &NodeAvailable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeConnection_descriptor_, &NodeConnection::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tracker_2eproto() {
  delete HelloToTracker::default_instance_;
  delete HelloToTracker_reflection_;
  delete HelloToClient::default_instance_;
  delete HelloToClient_reflection_;
  delete NewBatch::default_instance_;
  delete NewBatch_reflection_;
  delete NodesRequest::default_instance_;
  delete NodesRequest_reflection_;
  delete NodesResponse::default_instance_;
  delete NodesResponse_reflection_;
  delete NodesResponse_Node::default_instance_;
  delete NodesResponse_Node_reflection_;
  delete NodeAvailable::default_instance_;
  delete NodeAvailable_reflection_;
  delete NodeConnection::default_instance_;
  delete NodeConnection_reflection_;
}

void protobuf_AddDesc_tracker_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rtracker.proto\022\007tracker\"k\n\016HelloToTrack"
    "er\022\022\n\nsession_id\030\001 \002(\005\022\017\n\007address\030\002 \002(\t\022"
    "\014\n\004port\030\003 \002(\005\022\023\n\013client_port\030\004 \002(\005\022\021\n\tav"
    "ailable\030\005 \002(\005\"#\n\rHelloToClient\022\022\n\nsessio"
    "n_id\030\001 \002(\005\"\236\001\n\010NewBatch\022\022\n\nsession_id\030\001 "
    "\002(\005\022\022\n\nbatch_hash\030\002 \002(\t\022\r\n\005tasks\030\003 \002(\005\022/"
    "\n\nbatch_type\030\004 \002(\0162\033.tracker.NewBatch.Ba"
    "tchType\"*\n\tBatchType\022\014\n\010RAYTRACE\020\000\022\017\n\013PH"
    "OTSHOOTAH\020\001\"1\n\014NodesRequest\022\022\n\nsession_i"
    "d\030\001 \002(\005\022\r\n\005nodes\030\002 \002(\005\"v\n\rNodesResponse\022"
    "*\n\005nodes\030\001 \003(\0132\033.tracker.NodesResponse.N"
    "ode\0329\n\004Node\022\022\n\nsession_id\030\001 \002(\005\022\017\n\007addre"
    "ss\030\002 \002(\t\022\014\n\004port\030\003 \002(\005\"6\n\rNodeAvailable\022"
    "\022\n\nsession_id\030\001 \002(\005\022\021\n\tavailable\030\002 \002(\005\"="
    "\n\016NodeConnection\022\022\n\nsession_id\030\001 \002(\005\022\027\n\017"
    "connected_to_id\030\002 \002(\005", 621);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tracker.proto", &protobuf_RegisterTypes);
  HelloToTracker::default_instance_ = new HelloToTracker();
  HelloToClient::default_instance_ = new HelloToClient();
  NewBatch::default_instance_ = new NewBatch();
  NodesRequest::default_instance_ = new NodesRequest();
  NodesResponse::default_instance_ = new NodesResponse();
  NodesResponse_Node::default_instance_ = new NodesResponse_Node();
  NodeAvailable::default_instance_ = new NodeAvailable();
  NodeConnection::default_instance_ = new NodeConnection();
  HelloToTracker::default_instance_->InitAsDefaultInstance();
  HelloToClient::default_instance_->InitAsDefaultInstance();
  NewBatch::default_instance_->InitAsDefaultInstance();
  NodesRequest::default_instance_->InitAsDefaultInstance();
  NodesResponse::default_instance_->InitAsDefaultInstance();
  NodesResponse_Node::default_instance_->InitAsDefaultInstance();
  NodeAvailable::default_instance_->InitAsDefaultInstance();
  NodeConnection::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tracker_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tracker_2eproto {
  StaticDescriptorInitializer_tracker_2eproto() {
    protobuf_AddDesc_tracker_2eproto();
  }
} static_descriptor_initializer_tracker_2eproto_;


// ===================================================================

const ::std::string HelloToTracker::_default_address_;
#ifndef _MSC_VER
const int HelloToTracker::kSessionIdFieldNumber;
const int HelloToTracker::kAddressFieldNumber;
const int HelloToTracker::kPortFieldNumber;
const int HelloToTracker::kClientPortFieldNumber;
const int HelloToTracker::kAvailableFieldNumber;
#endif  // !_MSC_VER

HelloToTracker::HelloToTracker()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HelloToTracker::InitAsDefaultInstance() {
}

HelloToTracker::HelloToTracker(const HelloToTracker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HelloToTracker::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0;
  address_ = const_cast< ::std::string*>(&_default_address_);
  port_ = 0;
  client_port_ = 0;
  available_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HelloToTracker::~HelloToTracker() {
  SharedDtor();
}

void HelloToTracker::SharedDtor() {
  if (address_ != &_default_address_) {
    delete address_;
  }
  if (this != default_instance_) {
  }
}

void HelloToTracker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HelloToTracker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HelloToTracker_descriptor_;
}

const HelloToTracker& HelloToTracker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tracker_2eproto();  return *default_instance_;
}

HelloToTracker* HelloToTracker::default_instance_ = NULL;

HelloToTracker* HelloToTracker::New() const {
  return new HelloToTracker;
}

void HelloToTracker::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0;
    if (_has_bit(1)) {
      if (address_ != &_default_address_) {
        address_->clear();
      }
    }
    port_ = 0;
    client_port_ = 0;
    available_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HelloToTracker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_address;
        break;
      }
      
      // required string address = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }
      
      // required int32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_client_port;
        break;
      }
      
      // required int32 client_port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_port_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_available;
        break;
      }
      
      // required int32 available = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_available:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &available_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HelloToTracker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->session_id(), output);
  }
  
  // required string address = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->address(), output);
  }
  
  // required int32 port = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }
  
  // required int32 client_port = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->client_port(), output);
  }
  
  // required int32 available = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->available(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HelloToTracker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->session_id(), target);
  }
  
  // required string address = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->address(), target);
  }
  
  // required int32 port = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }
  
  // required int32 client_port = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->client_port(), target);
  }
  
  // required int32 available = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->available(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HelloToTracker::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->session_id());
    }
    
    // required string address = 2;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }
    
    // required int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }
    
    // required int32 client_port = 4;
    if (has_client_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_port());
    }
    
    // required int32 available = 5;
    if (has_available()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->available());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HelloToTracker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HelloToTracker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HelloToTracker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HelloToTracker::MergeFrom(const HelloToTracker& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_address(from.address());
    }
    if (from._has_bit(2)) {
      set_port(from.port());
    }
    if (from._has_bit(3)) {
      set_client_port(from.client_port());
    }
    if (from._has_bit(4)) {
      set_available(from.available());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HelloToTracker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HelloToTracker::CopyFrom(const HelloToTracker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelloToTracker::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void HelloToTracker::Swap(HelloToTracker* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(address_, other->address_);
    std::swap(port_, other->port_);
    std::swap(client_port_, other->client_port_);
    std::swap(available_, other->available_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HelloToTracker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HelloToTracker_descriptor_;
  metadata.reflection = HelloToTracker_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HelloToClient::kSessionIdFieldNumber;
#endif  // !_MSC_VER

HelloToClient::HelloToClient()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HelloToClient::InitAsDefaultInstance() {
}

HelloToClient::HelloToClient(const HelloToClient& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HelloToClient::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HelloToClient::~HelloToClient() {
  SharedDtor();
}

void HelloToClient::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HelloToClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HelloToClient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HelloToClient_descriptor_;
}

const HelloToClient& HelloToClient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tracker_2eproto();  return *default_instance_;
}

HelloToClient* HelloToClient::default_instance_ = NULL;

HelloToClient* HelloToClient::New() const {
  return new HelloToClient;
}

void HelloToClient::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HelloToClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HelloToClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->session_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HelloToClient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->session_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HelloToClient::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->session_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HelloToClient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HelloToClient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HelloToClient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HelloToClient::MergeFrom(const HelloToClient& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HelloToClient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HelloToClient::CopyFrom(const HelloToClient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelloToClient::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void HelloToClient::Swap(HelloToClient* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HelloToClient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HelloToClient_descriptor_;
  metadata.reflection = HelloToClient_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NewBatch_BatchType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewBatch_BatchType_descriptor_;
}
bool NewBatch_BatchType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NewBatch_BatchType NewBatch::RAYTRACE;
const NewBatch_BatchType NewBatch::PHOTSHOOTAH;
const NewBatch_BatchType NewBatch::BatchType_MIN;
const NewBatch_BatchType NewBatch::BatchType_MAX;
const int NewBatch::BatchType_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string NewBatch::_default_batch_hash_;
#ifndef _MSC_VER
const int NewBatch::kSessionIdFieldNumber;
const int NewBatch::kBatchHashFieldNumber;
const int NewBatch::kTasksFieldNumber;
const int NewBatch::kBatchTypeFieldNumber;
#endif  // !_MSC_VER

NewBatch::NewBatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NewBatch::InitAsDefaultInstance() {
}

NewBatch::NewBatch(const NewBatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NewBatch::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0;
  batch_hash_ = const_cast< ::std::string*>(&_default_batch_hash_);
  tasks_ = 0;
  batch_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewBatch::~NewBatch() {
  SharedDtor();
}

void NewBatch::SharedDtor() {
  if (batch_hash_ != &_default_batch_hash_) {
    delete batch_hash_;
  }
  if (this != default_instance_) {
  }
}

void NewBatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewBatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewBatch_descriptor_;
}

const NewBatch& NewBatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tracker_2eproto();  return *default_instance_;
}

NewBatch* NewBatch::default_instance_ = NULL;

NewBatch* NewBatch::New() const {
  return new NewBatch;
}

void NewBatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0;
    if (_has_bit(1)) {
      if (batch_hash_ != &_default_batch_hash_) {
        batch_hash_->clear();
      }
    }
    tasks_ = 0;
    batch_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewBatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_batch_hash;
        break;
      }
      
      // required string batch_hash = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_batch_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_batch_hash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->batch_hash().data(), this->batch_hash().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tasks;
        break;
      }
      
      // required int32 tasks = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tasks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tasks_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_batch_type;
        break;
      }
      
      // required .tracker.NewBatch.BatchType batch_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_batch_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tracker::NewBatch_BatchType_IsValid(value)) {
            set_batch_type(static_cast< ::tracker::NewBatch_BatchType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NewBatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->session_id(), output);
  }
  
  // required string batch_hash = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->batch_hash().data(), this->batch_hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->batch_hash(), output);
  }
  
  // required int32 tasks = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tasks(), output);
  }
  
  // required .tracker.NewBatch.BatchType batch_type = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->batch_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NewBatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->session_id(), target);
  }
  
  // required string batch_hash = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->batch_hash().data(), this->batch_hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->batch_hash(), target);
  }
  
  // required int32 tasks = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tasks(), target);
  }
  
  // required .tracker.NewBatch.BatchType batch_type = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->batch_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NewBatch::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->session_id());
    }
    
    // required string batch_hash = 2;
    if (has_batch_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->batch_hash());
    }
    
    // required int32 tasks = 3;
    if (has_tasks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tasks());
    }
    
    // required .tracker.NewBatch.BatchType batch_type = 4;
    if (has_batch_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->batch_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewBatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewBatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewBatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewBatch::MergeFrom(const NewBatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_batch_hash(from.batch_hash());
    }
    if (from._has_bit(2)) {
      set_tasks(from.tasks());
    }
    if (from._has_bit(3)) {
      set_batch_type(from.batch_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewBatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewBatch::CopyFrom(const NewBatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewBatch::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void NewBatch::Swap(NewBatch* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(batch_hash_, other->batch_hash_);
    std::swap(tasks_, other->tasks_);
    std::swap(batch_type_, other->batch_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewBatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewBatch_descriptor_;
  metadata.reflection = NewBatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NodesRequest::kSessionIdFieldNumber;
const int NodesRequest::kNodesFieldNumber;
#endif  // !_MSC_VER

NodesRequest::NodesRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodesRequest::InitAsDefaultInstance() {
}

NodesRequest::NodesRequest(const NodesRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodesRequest::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0;
  nodes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodesRequest::~NodesRequest() {
  SharedDtor();
}

void NodesRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NodesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodesRequest_descriptor_;
}

const NodesRequest& NodesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tracker_2eproto();  return *default_instance_;
}

NodesRequest* NodesRequest::default_instance_ = NULL;

NodesRequest* NodesRequest::New() const {
  return new NodesRequest;
}

void NodesRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0;
    nodes_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nodes;
        break;
      }
      
      // required int32 nodes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nodes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nodes_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->session_id(), output);
  }
  
  // required int32 nodes = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nodes(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodesRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->session_id(), target);
  }
  
  // required int32 nodes = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nodes(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodesRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->session_id());
    }
    
    // required int32 nodes = 2;
    if (has_nodes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nodes());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodesRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodesRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodesRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodesRequest::MergeFrom(const NodesRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_nodes(from.nodes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodesRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodesRequest::CopyFrom(const NodesRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodesRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void NodesRequest::Swap(NodesRequest* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(nodes_, other->nodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodesRequest_descriptor_;
  metadata.reflection = NodesRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string NodesResponse_Node::_default_address_;
#ifndef _MSC_VER
const int NodesResponse_Node::kSessionIdFieldNumber;
const int NodesResponse_Node::kAddressFieldNumber;
const int NodesResponse_Node::kPortFieldNumber;
#endif  // !_MSC_VER

NodesResponse_Node::NodesResponse_Node()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodesResponse_Node::InitAsDefaultInstance() {
}

NodesResponse_Node::NodesResponse_Node(const NodesResponse_Node& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodesResponse_Node::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0;
  address_ = const_cast< ::std::string*>(&_default_address_);
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodesResponse_Node::~NodesResponse_Node() {
  SharedDtor();
}

void NodesResponse_Node::SharedDtor() {
  if (address_ != &_default_address_) {
    delete address_;
  }
  if (this != default_instance_) {
  }
}

void NodesResponse_Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodesResponse_Node::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodesResponse_Node_descriptor_;
}

const NodesResponse_Node& NodesResponse_Node::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tracker_2eproto();  return *default_instance_;
}

NodesResponse_Node* NodesResponse_Node::default_instance_ = NULL;

NodesResponse_Node* NodesResponse_Node::New() const {
  return new NodesResponse_Node;
}

void NodesResponse_Node::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0;
    if (_has_bit(1)) {
      if (address_ != &_default_address_) {
        address_->clear();
      }
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodesResponse_Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_address;
        break;
      }
      
      // required string address = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }
      
      // required int32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodesResponse_Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->session_id(), output);
  }
  
  // required string address = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->address(), output);
  }
  
  // required int32 port = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodesResponse_Node::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->session_id(), target);
  }
  
  // required string address = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->address(), target);
  }
  
  // required int32 port = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodesResponse_Node::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->session_id());
    }
    
    // required string address = 2;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }
    
    // required int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodesResponse_Node::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodesResponse_Node* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodesResponse_Node*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodesResponse_Node::MergeFrom(const NodesResponse_Node& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_address(from.address());
    }
    if (from._has_bit(2)) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodesResponse_Node::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodesResponse_Node::CopyFrom(const NodesResponse_Node& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodesResponse_Node::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void NodesResponse_Node::Swap(NodesResponse_Node* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(address_, other->address_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodesResponse_Node::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodesResponse_Node_descriptor_;
  metadata.reflection = NodesResponse_Node_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int NodesResponse::kNodesFieldNumber;
#endif  // !_MSC_VER

NodesResponse::NodesResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodesResponse::InitAsDefaultInstance() {
}

NodesResponse::NodesResponse(const NodesResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodesResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodesResponse::~NodesResponse() {
  SharedDtor();
}

void NodesResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NodesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodesResponse_descriptor_;
}

const NodesResponse& NodesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tracker_2eproto();  return *default_instance_;
}

NodesResponse* NodesResponse::default_instance_ = NULL;

NodesResponse* NodesResponse::New() const {
  return new NodesResponse;
}

void NodesResponse::Clear() {
  nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tracker.NodesResponse.Node nodes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_nodes;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tracker.NodesResponse.Node nodes = 1;
  for (int i = 0; i < this->nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->nodes(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodesResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tracker.NodesResponse.Node nodes = 1;
  for (int i = 0; i < this->nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->nodes(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodesResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .tracker.NodesResponse.Node nodes = 1;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodes(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodesResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodesResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodesResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodesResponse::MergeFrom(const NodesResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodes_.MergeFrom(from.nodes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodesResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodesResponse::CopyFrom(const NodesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodesResponse::IsInitialized() const {
  
  for (int i = 0; i < nodes_size(); i++) {
    if (!this->nodes(i).IsInitialized()) return false;
  }
  return true;
}

void NodesResponse::Swap(NodesResponse* other) {
  if (other != this) {
    nodes_.Swap(&other->nodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodesResponse_descriptor_;
  metadata.reflection = NodesResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NodeAvailable::kSessionIdFieldNumber;
const int NodeAvailable::kAvailableFieldNumber;
#endif  // !_MSC_VER

NodeAvailable::NodeAvailable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeAvailable::InitAsDefaultInstance() {
}

NodeAvailable::NodeAvailable(const NodeAvailable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeAvailable::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0;
  available_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeAvailable::~NodeAvailable() {
  SharedDtor();
}

void NodeAvailable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NodeAvailable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeAvailable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeAvailable_descriptor_;
}

const NodeAvailable& NodeAvailable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tracker_2eproto();  return *default_instance_;
}

NodeAvailable* NodeAvailable::default_instance_ = NULL;

NodeAvailable* NodeAvailable::New() const {
  return new NodeAvailable;
}

void NodeAvailable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0;
    available_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeAvailable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_available;
        break;
      }
      
      // required int32 available = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_available:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &available_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeAvailable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->session_id(), output);
  }
  
  // required int32 available = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->available(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeAvailable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->session_id(), target);
  }
  
  // required int32 available = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->available(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeAvailable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->session_id());
    }
    
    // required int32 available = 2;
    if (has_available()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->available());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeAvailable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeAvailable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeAvailable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeAvailable::MergeFrom(const NodeAvailable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_available(from.available());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeAvailable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeAvailable::CopyFrom(const NodeAvailable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeAvailable::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void NodeAvailable::Swap(NodeAvailable* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(available_, other->available_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeAvailable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeAvailable_descriptor_;
  metadata.reflection = NodeAvailable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NodeConnection::kSessionIdFieldNumber;
const int NodeConnection::kConnectedToIdFieldNumber;
#endif  // !_MSC_VER

NodeConnection::NodeConnection()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeConnection::InitAsDefaultInstance() {
}

NodeConnection::NodeConnection(const NodeConnection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeConnection::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0;
  connected_to_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeConnection::~NodeConnection() {
  SharedDtor();
}

void NodeConnection::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NodeConnection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeConnection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeConnection_descriptor_;
}

const NodeConnection& NodeConnection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tracker_2eproto();  return *default_instance_;
}

NodeConnection* NodeConnection::default_instance_ = NULL;

NodeConnection* NodeConnection::New() const {
  return new NodeConnection;
}

void NodeConnection::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_id_ = 0;
    connected_to_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeConnection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_connected_to_id;
        break;
      }
      
      // required int32 connected_to_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_connected_to_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &connected_to_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeConnection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 session_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->session_id(), output);
  }
  
  // required int32 connected_to_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->connected_to_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeConnection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 session_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->session_id(), target);
  }
  
  // required int32 connected_to_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->connected_to_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeConnection::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->session_id());
    }
    
    // required int32 connected_to_id = 2;
    if (has_connected_to_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->connected_to_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeConnection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeConnection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeConnection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeConnection::MergeFrom(const NodeConnection& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_session_id(from.session_id());
    }
    if (from._has_bit(1)) {
      set_connected_to_id(from.connected_to_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeConnection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeConnection::CopyFrom(const NodeConnection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeConnection::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void NodeConnection::Swap(NodeConnection* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(connected_to_id_, other->connected_to_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeConnection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeConnection_descriptor_;
  metadata.reflection = NodeConnection_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tracker

// @@protoc_insertion_point(global_scope)
